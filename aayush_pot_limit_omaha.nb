shuffledDeck = 
  RandomSample[Flatten[Table[{rank, suit}, {rank, 2, 14}, {suit, 1, 4}], 1]];

userHand = shuffledDeck[[1 ;; 4]]; computerHand = shuffledDeck[[5 ;; 8]];

restOfDeck1 = shuffledDeck[[9 ;;]];
restOfDeck2 = Nest[Rest, restOfDeck1, 3];
restOfDeck3 = Rest[restOfDeck2];

board = restOfDeck1[[;; 5]];
flop = board[[1 ;; 3]];
turn1 = board[[2 ;; 4]];
turn2 = Table[board[[i]], {i, {1, 2, 4}}];
turn3 = Table[board[[i]], {i, {1, 3, 4}}];
river1 = board[[3 ;;]];
river2 = Table[board[[i]], {i, {1, 2, 5}}];
river3 = Table[board[[i]], {i, {1, 3, 5}}];
river4 = Table[board[[i]], {i, {1, 4, 5}}];
river5 = Table[board[[i]], {i, {2, 3, 5}}];
river6 = Table[board[[i]], {i, {2, 4, 5}}];

uHand1 = userHand[[1 ;; 2]];
uHand2 = userHand[[2 ;; 3]];
uHand3 = userHand[[3 ;; 4]];
uHand4 = Table[userHand[[i]], {i, {1, 3}}];
uHand5 = Table[userHand[[i]], {i, {2, 4}}];
uHand6 = Table[userHand[[i]], {i, {1, 4}}];
cHand1 = computerHand[[1 ;; 2]];
cHand2 = computerHand[[2 ;; 3]];
cHand3 = computerHand[[3 ;; 4]];
cHand4 = Table[computerHand[[i]], {i, {1, 3}}];
cHand5 = Table[computerHand[[i]], {i, {2, 4}}];
cHand6 = Table[computerHand[[i]], {i, {1, 4}}];

straightFlush[nHandNum_, b_] := (
  If[Length[Union[Join[nHandNum, b][[All, 2]]]] == 1,
   
   x = Sort[Join[nHandNum, b][[All, 1]], Greater];
   y = Sort[Join[nHandNum, b], #1[[1]] > #2[[1]] &];
   If[x[[1]] == x[[2]] + 1 && x[[1]] == x[[3]] + 2 &&
     
     x[[1]] == x[[4]] + 3 && x[[1]] == x[[5]] + 4,
    Return[Join[{y}, {9, x[[1]]}]],
    If[x == {14, 5, 4, 3, 2},
     Join[{Join[y[[2 ;;]], {y[[1]]}]}, {9, 5}], False]],
   
   False]
  )

quadorhouse[nHandNum_, b_] := (
  If[Length[Union[Join[nHandNum, b][[All, 1]]]] == 2,
   
   x = Gather[Sort[Join[nHandNum, b][[All, 1]], Greater]];
   y = Sort[Join[nHandNum, b], #1[[1]] >= #2[[1]] &];
   z = Sort[Join[nHandNum, b], #1[[1]] <= #2[[1]] &];
   Which[
    Length[x[[1]]] == 4, Join[{y}, {8, x[[1, 1]], x[[2, 1]]}],
    Length[x[[2]]] == 4, Join[{z}, {8, x[[2, 1]], x[[1, 1]]}],
    Length[x[[1]]] == 3, Join[{y}, {7, x[[1, 1]], x[[2, 1]]}],
    Length[x[[2]]] == 3, Join[{z}, {7, x[[2, 1]], x[[1, 1]]}]
    ],
   
   False]
  )

flush[nHandNum_, b_] := (
  If[Length[Union[Join[nHandNum, b][[All, 2]]]] == 1,
   
   x = Sort[Join[nHandNum, b][[All, 1]], Greater];
   Join[{Sort[Join[nHandNum, b], #1[[1]] >= #2[[1]] &]}, {6}, x],
   
   False]
  )

straight[nHandNum_, b_] := (
  x = Sort[Join[nHandNum, b][[All, 1]], Greater];
  y = Sort[Join[nHandNum, b], #1[[1]] > #2[[1]] &];
  If[x[[1]] == x[[2]] + 1 && x[[1]] == x[[3]] + 2 &&
    
    x[[1]] == x[[4]] + 3 && x[[1]] == x[[5]] + 4,
   
   Join[{y}, {5, x[[1]]}],
   
   If[x == {14, 5, 4, 3, 2},
    Join[{Join[y[[2 ;;]], {y[[1]]}]}, {5, 5}],
    False]
   ]
  )

triportwopair[nHandNum_, b_] := (
  If[Length[Union[Join[nHandNum, b][[All, 1]]]] == 3,
   
   x = Gather[Sort[Join[nHandNum, b][[All, 1]], Greater]];
   y = Sort[Join[nHandNum, b], #1[[1]] >= #2[[1]] &];
   Which[
    Length[x[[1]]] == 3,
    Join[{y}, {4, x[[1, 1]], x[[2, 1]], x[[3, 1]]}],
    
    Length[x[[2]]] == 3,
    Join[{Join[y[[2 ;; 4]], {y[[1]]}, {y[[5]]}]},
     {4, x[[2, 1]], x[[1, 1]], x[[3, 1]]}],
    
    Length[x[[3]]] == 3,
    Join[{Join[y[[3 ;;]], {y[[1]]}, {y[[2]]}]},
     {4, x[[3, 1]], x[[1, 1]], x[[2, 1]]}],
    
    Length[x[[1]]] == 2 && Length[x[[2]]] == 2,
    Join[{y}, {3, x[[1, 1]], x[[2, 1]], x[[3, 1]]}],
    
    Length[x[[1]]] == 2 && Length[x[[3]]] == 2,
    Join[{Join[y[[;; 2]], y[[4 ;;]], {y[[3]]}]},
     {3, x[[1, 1]], x[[3, 1]], x[[2, 1]]}],
    
    Length[x[[2]]] == 2 && Length[x[[3]]] == 2,
    Join[{Join[y[[2 ;; 3]], y[[4 ;;]], {y[[1]]}]},
     {3, x[[2, 1]], x[[3, 1]], x[[1, 1]]}]
    ],
   
   False]
  )

pair[nHandNum_, b_] := (
  If[Length[Union[Join[nHandNum, b][[All, 1]]]] == 4,
   
   x = Gather[Sort[Join[nHandNum, b][[All, 1]], Greater]];
   y = Sort[Join[nHandNum, b], #1[[1]] >= #2[[1]] &];
   Which[
    Length[x[[1]]] == 2,
    Join[{y}, {2, x[[1, 1]], x[[2, 1]], x[[3, 1]], x[[4, 1]]}],
    
    Length[x[[2]]] == 2,
    Join[{Join[y[[2 ;; 3]], {y[[1]]}, {y[[4]]}, {y[[5]]}]},
     {2, x[[2, 1]], x[[1, 1]], x[[3, 1]], x[[4, 1]]}],
    
    Length[x[[3]]] == 2,
    Join[{Join[y[[3 ;; 4]], {y[[1]]}, {y[[2]]}, {y[[5]]}]},
     {2, x[[3, 1]], x[[1, 1]], x[[2, 1]], x[[4, 1]]}],
    
    Length[x[[4]]] == 2,
    Join[{Join[y[[4 ;;]], {y[[1]]}, {y[[2]]}, {y[[3]]}]},
     {2, x[[4, 1]], x[[1, 1]], x[[2, 1]], x[[3, 1]]}]],
   
   False]
  )

highCard[nHandNum_, b_] := (
  Join[{Sort[Join[nHandNum, b], #1[[1]] >= #2[[1]] &]}, {1},
   Sort[Join[nHandNum, b][[All, 1]], Greater]]
  )

bestWithHand[nHandNum_, b_] := (
  If[Length[straightFlush[nHandNum, b]] != 0, straightFlush[nHandNum, b],
   If[Length[quadorhouse[nHandNum, b]] != 0, quadorhouse[nHandNum, b],
    If[Length[flush[nHandNum, b]] != 0, flush[nHandNum, b],
     If[Length[straight[nHandNum, b]] != 0, straight[nHandNum, b],
      If[Length[triportwopair[nHandNum, b]] != 0, triportwopair[nHandNum, b],
       If[Length[pair[nHandNum, b]] != 0, pair[nHandNum, b], 
        highCard[nHandNum, b]]]]]]]
  )

compareBestHands[possible_] := (
  If[Length[possible] == 1, possible[[1]],
   rank = possible[[1, 2]];
   Which[
    rank == 9 || rank == 5,
    MaximalBy[possible, #[[3]] &][[1]],
    
    rank == 8 || rank == 7,
    If[Length[MaximalBy[possible, #[[3]] &]] == 1,
     MaximalBy[possible, #[[3]] &][[1]],
     MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &][[1]]],
    
    rank == 6 || rank == 1,
    If[Length[MaximalBy[possible, #[[3]] &]] == 1,
     MaximalBy[possible, #[[3]] &][[1]],
     If[Length[MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &]] == 1,
      MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &][[1]],
      If[Length[
         MaximalBy[
          MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &]] == 
        1,
       MaximalBy[
         MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &][[1]],
       If[Length[
          MaximalBy[
           MaximalBy[
            MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &], #[[
             6]] &]] == 1,
        MaximalBy[
          MaximalBy[
           MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &], #[[
            6]] &][[1]],
        MaximalBy[
          MaximalBy[
           MaximalBy[
            MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &], #[[
             6]] &], #[[7]] &][[1]]]]]],
    
    rank == 4 || rank == 3,
    If[Length[MaximalBy[possible, #[[3]] &]] == 1,
     MaximalBy[possible, #[[3]] &][[1]],
     If[Length[MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &]] == 1,
      MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &][[1]],
      MaximalBy[
        MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &][[1]]]],
    
    rank == 2,
    If[Length[MaximalBy[possible, #[[3]] &]] == 1,
     MaximalBy[possible, #[[3]] &][[1]],
     If[Length[MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &]] == 1,
      MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &][[1]],
      If[Length[
         MaximalBy[
          MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &]] == 
        1,
       MaximalBy[
         MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &][[1]],
       MaximalBy[
         MaximalBy[
          MaximalBy[MaximalBy[possible, #[[3]] &], #[[4]] &], #[[5]] &], #[[
           6]] &][[1]]]]]
    ]
   ]
  )

bestFlop[playerbesthand_, nHand1_, nHand2_, nHand3_, nHand4_, nHand5_, 
  nHand6_] := (
  F = compareBestHands[
    MaximalBy[{
      bestWithHand[nHand1, flop], bestWithHand[nHand2, flop],
      bestWithHand[nHand3, flop], bestWithHand[nHand4, flop],
      bestWithHand[nHand5, flop], bestWithHand[nHand6, flop]
      }, #[[2]] &]];
  playerbesthand = F
  )

bestTurn[playerbesthand_, nHand1_, nHand2_, nHand3_, nHand4_, nHand5_, 
  nHand6_] := (
  T = compareBestHands[
    MaximalBy[{
      bestWithHand[nHand1, turn1], bestWithHand[nHand2, turn1],
      bestWithHand[nHand3, turn1], bestWithHand[nHand4, turn1],
      bestWithHand[nHand5, turn1], bestWithHand[nHand6, turn1],
      
      bestWithHand[nHand1, turn2], bestWithHand[nHand2, turn2],
      bestWithHand[nHand3, turn2], bestWithHand[nHand4, turn2],
      bestWithHand[nHand5, turn2], bestWithHand[nHand6, turn2],
      
      bestWithHand[nHand1, turn3], bestWithHand[nHand2, turn3],
      bestWithHand[nHand3, turn3], bestWithHand[nHand4, turn3],
      bestWithHand[nHand5, turn3], bestWithHand[nHand6, turn3]
      }, #[[2]] &]];
  T2 = playerbesthand; T3 = compareBestHands[MaximalBy[{T2, T}, #[[2]] &]];
  If[Length[{T3}] >= 2, T3[[1]], T3]
  )

bestRiver[playerbesthand_, nHand1_, nHand2_, nHand3_, nHand4_, nHand5_, 
  nHand6_] := (
  R = compareBestHands[
    MaximalBy[{
      bestWithHand[nHand1, river1], bestWithHand[nHand2, river1],
      bestWithHand[nHand3, river1], bestWithHand[nHand4, river1],
      bestWithHand[nHand5, river1], bestWithHand[nHand6, river1],
      
      bestWithHand[nHand1, river2], bestWithHand[nHand2, river2],
      bestWithHand[nHand3, river2], bestWithHand[nHand4, river2],
      bestWithHand[nHand5, river2], bestWithHand[nHand6, river2],
      
      bestWithHand[nHand1, river3], bestWithHand[nHand2, river3],
      bestWithHand[nHand3, river3], bestWithHand[nHand4, river3],
      bestWithHand[nHand5, river3], bestWithHand[nHand6, river3],
      
      bestWithHand[nHand1, river4], bestWithHand[nHand2, river4],
      bestWithHand[nHand3, river4], bestWithHand[nHand4, river4],
      bestWithHand[nHand5, river4], bestWithHand[nHand6, river4],
      
      bestWithHand[nHand1, river5], bestWithHand[nHand2, river5],
      bestWithHand[nHand3, river5], bestWithHand[nHand4, river5],
      bestWithHand[nHand5, river5], bestWithHand[nHand6, river5],
      
      bestWithHand[nHand1, river6], bestWithHand[nHand2, river6],
      bestWithHand[nHand3, river6], bestWithHand[nHand4, river6],
      bestWithHand[nHand5, river6], bestWithHand[nHand6, river6]
      }, #[[2]] &]];
  R2 = playerbesthand; R3 = compareBestHands[MaximalBy[{R2, R}, #[[2]] &]];
  If[Length[{R3}] >= 2, R3[[1]], R3]
  )

(*bestOnFlop[nHand1_,nHand2_,nHand3_,nHand4_,nHand5_,nHand6_,card1_,card2_,\
card3_,card4_,card5_]:=(
compareBestHands[MaximalBy[{
bestWithHand[nHand1,Partition[Join[card1,card2,card3],2]],
bestWithHand[nHand1,Partition[Join[card1,card2,card4],2]],
bestWithHand[nHand1,Partition[Join[card1,card2,card5],2]],
bestWithHand[nHand1,Partition[Join[card1,card3,card4],2]],
bestWithHand[nHand1,Partition[Join[card1,card3,card5],2]],
bestWithHand[nHand1,Partition[Join[card1,card4,card5],2]],
bestWithHand[nHand1,Partition[Join[card2,card3,card4],2]],
bestWithHand[nHand1,Partition[Join[card2,card3,card5],2]],
bestWithHand[nHand1,Partition[Join[card2,card4,card5],2]],
bestWithHand[nHand1,Partition[Join[card3,card4,card5],2]],

bestWithHand[nHand2,Partition[Join[card1,card2,card3],2]],
bestWithHand[nHand2,Partition[Join[card1,card2,card4],2]],
bestWithHand[nHand2,Partition[Join[card1,card2,card5],2]],
bestWithHand[nHand2,Partition[Join[card1,card3,card4],2]],
bestWithHand[nHand2,Partition[Join[card1,card3,card5],2]],
bestWithHand[nHand2,Partition[Join[card1,card4,card5],2]],
bestWithHand[nHand2,Partition[Join[card2,card3,card4],2]],
bestWithHand[nHand2,Partition[Join[card2,card3,card5],2]],
bestWithHand[nHand2,Partition[Join[card2,card4,card5],2]],
bestWithHand[nHand2,Partition[Join[card3,card4,card5],2]],

bestWithHand[nHand3,Partition[Join[card1,card2,card3],2]],
bestWithHand[nHand3,Partition[Join[card1,card2,card4],2]],
bestWithHand[nHand3,Partition[Join[card1,card2,card5],2]],
bestWithHand[nHand3,Partition[Join[card1,card3,card4],2]],
bestWithHand[nHand3,Partition[Join[card1,card3,card5],2]],
bestWithHand[nHand3,Partition[Join[card1,card4,card5],2]],
bestWithHand[nHand3,Partition[Join[card2,card3,card4],2]],
bestWithHand[nHand3,Partition[Join[card2,card3,card5],2]],
bestWithHand[nHand3,Partition[Join[card2,card4,card5],2]],
bestWithHand[nHand3,Partition[Join[card3,card4,card5],2]],

bestWithHand[nHand4,Partition[Join[card1,card2,card3],2]],
bestWithHand[nHand4,Partition[Join[card1,card2,card4],2]],
bestWithHand[nHand4,Partition[Join[card1,card2,card5],2]],
bestWithHand[nHand4,Partition[Join[card1,card3,card4],2]],
bestWithHand[nHand4,Partition[Join[card1,card3,card5],2]],
bestWithHand[nHand4,Partition[Join[card1,card4,card5],2]],
bestWithHand[nHand4,Partition[Join[card2,card3,card4],2]],
bestWithHand[nHand4,Partition[Join[card2,card3,card5],2]],
bestWithHand[nHand4,Partition[Join[card2,card4,card5],2]],
bestWithHand[nHand4,Partition[Join[card3,card4,card5],2]],

bestWithHand[nHand5,Partition[Join[card1,card2,card3],2]],
bestWithHand[nHand5,Partition[Join[card1,card2,card4],2]],
bestWithHand[nHand5,Partition[Join[card1,card2,card5],2]],
bestWithHand[nHand5,Partition[Join[card1,card3,card4],2]],
bestWithHand[nHand5,Partition[Join[card1,card3,card5],2]],
bestWithHand[nHand5,Partition[Join[card1,card4,card5],2]],
bestWithHand[nHand5,Partition[Join[card2,card3,card4],2]],
bestWithHand[nHand5,Partition[Join[card2,card3,card5],2]],
bestWithHand[nHand5,Partition[Join[card2,card4,card5],2]],
bestWithHand[nHand5,Partition[Join[card3,card4,card5],2]],

bestWithHand[nHand6,Partition[Join[card1,card2,card3],2]],
bestWithHand[nHand6,Partition[Join[card1,card2,card4],2]],
bestWithHand[nHand6,Partition[Join[card1,card2,card5],2]],
bestWithHand[nHand6,Partition[Join[card1,card3,card4],2]],
bestWithHand[nHand6,Partition[Join[card1,card3,card5],2]],
bestWithHand[nHand6,Partition[Join[card1,card4,card5],2]],
bestWithHand[nHand6,Partition[Join[card2,card3,card4],2]],
bestWithHand[nHand6,Partition[Join[card2,card3,card5],2]],
bestWithHand[nHand6,Partition[Join[card2,card4,card5],2]],
bestWithHand[nHand6,Partition[Join[card3,card4,card5],2]]
},#[[2]]&]]
)*)

bestOnTurn[nHand1_, nHand2_, nHand3_, nHand4_, nHand5_, nHand6_, card1_, 
  card2_] := (
  compareBestHands[MaximalBy[{
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[2]], card1], 2]],
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[3]], card1], 2]],
     bestWithHand[nHand1, Partition[Join[board[[2]], board[[3]], card1], 2]],
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[2]], card2], 2]],
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[3]], card2], 2]],
     bestWithHand[nHand1, Partition[Join[board[[2]], board[[3]], card2], 2]],
     bestWithHand[nHand1, Partition[Join[board[[1]], card1, card2], 2]],
     bestWithHand[nHand1, Partition[Join[board[[2]], card1, card2], 2]],
     bestWithHand[nHand1, Partition[Join[board[[3]], card1, card2], 2]],
     
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[2]], card1], 2]],
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[3]], card1], 2]],
     bestWithHand[nHand2, Partition[Join[board[[2]], board[[3]], card1], 2]],
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[2]], card2], 2]],
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[3]], card2], 2]],
     bestWithHand[nHand2, Partition[Join[board[[2]], board[[3]], card2], 2]],
     bestWithHand[nHand2, Partition[Join[board[[1]], card1, card2], 2]],
     bestWithHand[nHand2, Partition[Join[board[[2]], card1, card2], 2]],
     bestWithHand[nHand2, Partition[Join[board[[3]], card1, card2], 2]],
     
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[2]], card1], 2]],
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[3]], card1], 2]],
     bestWithHand[nHand3, Partition[Join[board[[2]], board[[3]], card1], 2]],
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[2]], card2], 2]],
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[3]], card2], 2]],
     bestWithHand[nHand3, Partition[Join[board[[2]], board[[3]], card2], 2]],
     bestWithHand[nHand3, Partition[Join[board[[1]], card1, card2], 2]],
     bestWithHand[nHand3, Partition[Join[board[[2]], card1, card2], 2]],
     bestWithHand[nHand3, Partition[Join[board[[3]], card1, card2], 2]],
     
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[2]], card1], 2]],
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[3]], card1], 2]],
     bestWithHand[nHand4, Partition[Join[board[[2]], board[[3]], card1], 2]],
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[2]], card2], 2]],
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[3]], card2], 2]],
     bestWithHand[nHand4, Partition[Join[board[[2]], board[[3]], card2], 2]],
     bestWithHand[nHand4, Partition[Join[board[[1]], card1, card2], 2]],
     bestWithHand[nHand4, Partition[Join[board[[2]], card1, card2], 2]],
     bestWithHand[nHand4, Partition[Join[board[[3]], card1, card2], 2]],
     
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[2]], card1], 2]],
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[3]], card1], 2]],
     bestWithHand[nHand5, Partition[Join[board[[2]], board[[3]], card1], 2]],
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[2]], card2], 2]],
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[3]], card2], 2]],
     bestWithHand[nHand5, Partition[Join[board[[2]], board[[3]], card2], 2]],
     bestWithHand[nHand5, Partition[Join[board[[1]], card1, card2], 2]],
     bestWithHand[nHand5, Partition[Join[board[[2]], card1, card2], 2]],
     bestWithHand[nHand5, Partition[Join[board[[3]], card1, card2], 2]],
     
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[2]], card1], 2]],
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[3]], card1], 2]],
     bestWithHand[nHand6, Partition[Join[board[[2]], board[[3]], card1], 2]],
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[2]], card2], 2]],
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[3]], card2], 2]],
     bestWithHand[nHand6, Partition[Join[board[[2]], board[[3]], card2], 2]],
     bestWithHand[nHand6, Partition[Join[board[[1]], card1, card2], 2]],
     bestWithHand[nHand6, Partition[Join[board[[2]], card1, card2], 2]],
     bestWithHand[nHand6, Partition[Join[board[[3]], card1, card2], 2]]
     }, #[[2]] &]]
  )

bestOnRiver[nHand1_, nHand2_, nHand3_, nHand4_, nHand5_, nHand6_, card_] := (
  compareBestHands[MaximalBy[{
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[2]], card], 2]],
     bestWithHand[nHand1, Partition[Join[board[[2]], board[[3]], card], 2]],
     bestWithHand[nHand1, Partition[Join[board[[3]], board[[4]], card], 2]],
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[3]], card], 2]],
     bestWithHand[nHand1, Partition[Join[board[[2]], board[[4]], card], 2]],
     bestWithHand[nHand1, Partition[Join[board[[1]], board[[4]], card], 2]],
     
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[2]], card], 2]],
     bestWithHand[nHand2, Partition[Join[board[[2]], board[[3]], card], 2]],
     bestWithHand[nHand2, Partition[Join[board[[3]], board[[4]], card], 2]],
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[3]], card], 2]],
     bestWithHand[nHand2, Partition[Join[board[[2]], board[[4]], card], 2]],
     bestWithHand[nHand2, Partition[Join[board[[1]], board[[4]], card], 2]],
     
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[2]], card], 2]],
     bestWithHand[nHand3, Partition[Join[board[[2]], board[[3]], card], 2]],
     bestWithHand[nHand3, Partition[Join[board[[3]], board[[4]], card], 2]],
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[3]], card], 2]],
     bestWithHand[nHand3, Partition[Join[board[[2]], board[[4]], card], 2]],
     bestWithHand[nHand3, Partition[Join[board[[1]], board[[4]], card], 2]],
     
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[2]], card], 2]],
     bestWithHand[nHand4, Partition[Join[board[[2]], board[[3]], card], 2]],
     bestWithHand[nHand4, Partition[Join[board[[3]], board[[4]], card], 2]],
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[3]], card], 2]],
     bestWithHand[nHand4, Partition[Join[board[[2]], board[[4]], card], 2]],
     bestWithHand[nHand4, Partition[Join[board[[1]], board[[4]], card], 2]],
     
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[2]], card], 2]],
     bestWithHand[nHand5, Partition[Join[board[[2]], board[[3]], card], 2]],
     bestWithHand[nHand5, Partition[Join[board[[3]], board[[4]], card], 2]],
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[3]], card], 2]],
     bestWithHand[nHand5, Partition[Join[board[[2]], board[[4]], card], 2]],
     bestWithHand[nHand5, Partition[Join[board[[1]], board[[4]], card], 2]],
     
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[2]], card], 2]],
     bestWithHand[nHand6, Partition[Join[board[[2]], board[[3]], card], 2]],
     bestWithHand[nHand6, Partition[Join[board[[3]], board[[4]], card], 2]],
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[3]], card], 2]],
     bestWithHand[nHand6, Partition[Join[board[[2]], board[[4]], card], 2]],
     bestWithHand[nHand6, Partition[Join[board[[1]], board[[4]], card], 2]]
     }, #[[2]] &]]
  )

(*preflopEquity:=(
u=Flatten[Table[
bestOnFlop[uHand1,uHand2,uHand3,uHand4,uHand5,uHand6,restOfDeck1[[i]],
restOfDeck1[[j]],restOfDeck1[[k]],restOfDeck1[[m]],restOfDeck1[[n]]
],{i,40},{j,i+1,41},{k,j+1,42},{m,k+1,43},{n,m+1,44}],1];
c=Flatten[Table[
bestOnFlop[cHand1,cHand2,cHand3,cHand4,cHand5,cHand6,restOfDeck1[[i]],
restOfDeck1[[j]],restOfDeck1[[k]],restOfDeck1[[m]],restOfDeck1[[n]]
],{i,40},{j,i+1,41},{k,j+1,42},{m,k+1,43},{n,m+1,44}],1];
x1=N[Total[
Flatten[Table[
If[compareBestHands[
MaximalBy[{u[[i]],c[[i]]},#[[2]]&]
]\[Equal]u[[i]],1,0]
,{i,Length[u]}]]
]/(Length[u]/100)];
y1=N[Total[
Flatten[Table[
If[compareBestHands[
MaximalBy[{u[[i]],c[[i]]},#[[2]]&]
]\[Equal]c[[i]],1,0]
,{i,Length[c]}]]
]/(Length[c]/100)];
z1=100-x1-y1;
{Round[x1,.01],Round[y1,.01],Round[z1,.01]}
)*)

flopEquity[userbesthand_, computerbesthand_] := (
  u = Flatten[Table[
     bestOnTurn[uHand1, uHand2, uHand3, uHand4,
      uHand5, uHand6, restOfDeck2[[i]], restOfDeck2[[j]]]
     , {i, 40}, {j, i + 1, 41}], 1];
  c = Flatten[Table[
     bestOnTurn[cHand1, cHand2, cHand3, cHand4,
      cHand5, cHand6, restOfDeck2[[i]], restOfDeck2[[j]]]
     , {i, 40}, {j, i + 1, 41}], 1];
  u2 = Table[
    If[
     Length[compareBestHands[
        MaximalBy[{u[[i]], userbesthand}, #[[2]] &]
        ]] != 2,
     compareBestHands[
      MaximalBy[{u[[i]], userbesthand}, #[[2]] &]
      ], userbesthand
     ], {i, 820}];
  c2 = Table[
    If[
     Length[compareBestHands[
        MaximalBy[{c[[i]], computerbesthand}, #[[2]] &]
        ]] != 2,
     compareBestHands[
      MaximalBy[{c[[i]], computerbesthand}, #[[2]] &]
      ], computerbesthand
     ], {i, 820}];
  x1 = N[Total[Flatten[Table[If[compareBestHands[
           MaximalBy[{u2[[i]], c2[[i]]}, #[[2]] &]
           ] == u2[[i]], 1, 0], {i, 820}]]]/8.2];
  y1 = N[Total[Flatten[Table[If[compareBestHands[
           MaximalBy[{u2[[i]], c2[[i]]}, #[[2]] &]
           ] == c2[[i]], 1, 0], {i, 820}]]]/8.2];
  z1 = 100 - x1 - y1;
  {Round[x1, .01], Round[y1, .01], Round[z1, .01]}
  )

turnEquity[userbesthand_, computerbesthand_] := (
  u = Table[
    bestOnRiver[uHand1, uHand2, uHand3,
     uHand4, uHand5, uHand6, restOfDeck3[[i]]]
    , {i, 40}];
  c = Table[
    bestOnRiver[cHand1, cHand2, cHand3,
     cHand4, cHand5, cHand6, restOfDeck3[[i]]]
    , {i, 40}];
  u2 = Table[If[
     Length[compareBestHands[
        MaximalBy[{u[[i]], userbesthand}, #[[2]] &]]] != 2,
     compareBestHands[
      MaximalBy[{u[[i]], userbesthand}, #[[2]] &]]
     , userbesthand], {i, 40}];
  c2 = Table[If[
     Length[compareBestHands[
        MaximalBy[{c[[i]], computerbesthand}, #[[2]] &]]] != 2,
     compareBestHands[
      MaximalBy[{c[[i]], computerbesthand}, #[[2]] &]]
     , computerbesthand], {i, 40}];
  x1 = Table[
    If[compareBestHands[
       MaximalBy[{u2[[i]], c2[[i]]}, #[[2]] &]] == u2[[i]], 1, 0]
    , {i, 40}];
  y1 = Table[
    If[compareBestHands[
       MaximalBy[{u2[[i]], c2[[i]]}, #[[2]] &]] == c2[[i]], 1, 0]
    , {i, 40}];
  z1 = Table[
    If[Length[compareBestHands[
        MaximalBy[{u2[[i]], c2[[i]]}, #[[2]] &]]] == 2, 1, 0]
    , {i, 40}];
  {N[Total[x1]]*2.5, N[Total[y1]]*2.5, N[Total[z1]]*2.5}
  )

riverEquity[userbesthand_, computerbesthand_] := (
  If[compareBestHands[
     MaximalBy[{userbesthand, computerbesthand}, #[[2]] &]
     ] == userbesthand, {100, 0, 0},
   If[compareBestHands[
      MaximalBy[{userbesthand, computerbesthand}, #[[2]] &]
      ] == computerbesthand, {0, 100, 0}, {0, 0, 100}]]
  )

Graphics

suits = {\!\(\*
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
IAiCIAhCefkfLpPBXA==
"], {{0, 150}, {120, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSize->Automatic,
ImageSizeRaw->{120, 150},
PlotRange->{{0, 120}, {0, 150}}]\), \!\(\*
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
HMdxivIt48hfmQ==
"], {{0, 150}, {151, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSize->Automatic,
ImageSizeRaw->{151, 150},
PlotRange->{{0, 151}, {0, 150}}]\), \!\(\*
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
hBBCSOP4HxXhPsA=
"], {{0, 151}, {151, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSize->Automatic,
ImageSizeRaw->{151, 151},
PlotRange->{{0, 151}, {0, 151}}]\), \!\(\*
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
WGdxGoZhGIZhGIYRBv8C7ey+Ng==
"], {{0, 151}, {120, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSize->Automatic,
ImageSizeRaw->{120, 151},
PlotRange->{{0, 120}, {0, 151}}]\)};
blackCard = Graphics[{
    EdgeForm[{Thick, Black}],
    Black, Rectangle[{0, 0}, {3, 4}, RoundingRadius -> 0.1]
    }, ImageSize -> {100, 150}];
cardGraphics[{rank_Integer, suit_Integer}] :=
 
 If[rank == 0 && suit == 0, blackCard,
  If[rank == 1 && suit == 1, smallButton,
   If[rank == 1 && suit == 2, bigButton,
    Block[{name, color},
     name = Switch[rank, 11, "J", 12, "Q", 13, "K", 14, "A", _, rank];
     color = If[EvenQ[suit], Red, Black];
     Graphics[{
       EdgeForm[{Thick, Black}], White, 
       Rectangle[{0, 0}, {3, 4}, RoundingRadius -> 0.1],
       Inset[
        Text[Style[name, FontSize -> Scaled[.3], FontFamily -> "Arial", Bold, 
          color]], {1.5, 2.8}, Automatic, Automatic],
       Inset[Image[suits[[suit]]], {1.5, 1.333}, Automatic, 1]
       }, ImageSize -> {100, 150}, ImagePadding -> None, 
      Background -> Transparent]]]]]
cardGraphics[cards : {{_, _} ..}] := GraphicsRow[cardGraphics /@ cards, 10]
handGraphics[cards_, n_Integer] := cardGraphics[PadRight[cards, n, {{0, 0}}]]
shadeCardsHand[nHand_, playerbesthand_] := (
  g1 = Intersection[nHand, playerbesthand[[1]]];
  g2 = Table[
    If[g1[[1]] == nHand[[i]] || g1[[2]] == nHand[[i]], 
     cardGraphics[nHand[[i]]],
     Darker[cardGraphics[nHand[[i]]]]], {i, 4}];
  GraphicsRow[g2]
  )
shadeCardsBoard[board_, playerbesthand_] := (
  g1 = Intersection[board, playerbesthand[[1]]];
  g2 = Table[
    If[g1[[1]] == board[[i]] || g1[[2]] == board[[i]] || g1[[3]] == board[[i]],
     cardGraphics[board[[i]]], Darker[cardGraphics[board[[i]]]]], {i, 
     Length[board]}];
  Which[Length[board] == 3, AppendTo[g2, blackCard]; 
   GraphicsRow[AppendTo[g2, blackCard]],
   Length[board] == 4, GraphicsRow[AppendTo[g2, blackCard]],
   Length[board] == 5, GraphicsRow[g2]]
  )

drawBoard2[userHand_, computerHand_, userbesthand_, computerbesthand_, stage_,
   whoseMove_, userBet_, computerBet_, uTotalBet_, cTotalBet_, pot_, 
  userStack_, computerStack_, winner_, userCondition_, cpuCondition_] :=
 Show[
  GraphicsGrid[{
    If[stage != "Showdown",
     {GraphicsRow[{blackCard, blackCard, blackCard, blackCard}, 10],
      GraphicsRow[{blackCard, blackCard, blackCard, blackCard, blackCard}, 
       10]},
     {cardGraphics[computerHand], cardGraphics[computerbesthand[[1]]]}
     ],
    If[stage == "Preflop",
     {GraphicsRow[{blackCard, blackCard, blackCard, blackCard, blackCard}, 
       10]},
     If[stage == "Flop",
      {shadeCardsBoard[flop, userbesthand]},
      If[stage == "Turn",
       {shadeCardsBoard[board[[1 ;; 4]], userbesthand]},
       If[stage == "River" || stage == "Showdown",
        {shadeCardsBoard[board, userbesthand]}]]]],
    If[stage != "Preflop",
     {shadeCardsHand[userHand, userbesthand], cardGraphics[userbesthand[[1]]]},
     {cardGraphics[userHand]
      , GraphicsRow[{blackCard, blackCard, blackCard, blackCard, blackCard}, 
       10]}]
    },
   Background -> Darker[Green],
   Alignment -> {Center, 
     Automatic, {{1, 1} -> Left, {2, 1} -> Right, {3, 1} -> Left}},
   Spacings -> {{30, 30}, {0, 40, 40, 0}},
   ImageSize -> {1000, 500},
   Frame -> None
   ],
  Graphics[{
    EdgeForm[{Thick, Black}], Red, Rectangle[{600, -390}, {900, -210}],
    Text[Style["Move: " <> whoseMove, FontSize -> Scaled[.025], 
      FontFamily -> "Arial", Black], {605, -225}, Left],
    Text[Style["Your recent bet: " <> ToString[userBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -255}, 
     Left],
    Text[Style["Your total bet: " <> ToString[uTotalBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -285}, 
     Left],
    Text[Style["CPU's recent bet: " <> ToString[computerBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -315}, 
     Left],
    Text[Style["CPU's total bet: " <> ToString[cTotalBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -345}, 
     Left],
    Text[Style["CPU's total bet: " <> ToString[cTotalBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -345}, 
     Left],
    Text[Style["Pot: " <> ToString[pot], FontSize -> Scaled[.025], 
      FontFamily -> "Arial", Black], {605, -375}, Left],
    
    EdgeForm[{Thick, Black}], Orange, Rectangle[{0, -390}, {275, -360}],
    Text[Style["User's Move: " <> ToString[userCondition], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {0, -375}, 
     Left],
    EdgeForm[{Thick, Black}], Orange, Rectangle[{0, -195}, {275, -225}],
    Text[Style["CPU's Move: " <> ToString[cpuCondition], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {0, -210}, 
     Left],
    
    EdgeForm[{Thick, Black}], Red, Rectangle[{905, -390}, {1175, -350}],
    Text[Style["Your stack: " <> ToString[userStack], 
      FontSize -> Scaled[.0275], FontFamily -> "Arial", Black], {910, -370}, 
     Left],
    EdgeForm[{Thick, Black}], Red, Rectangle[{905, -250}, {1175, -210}],
    Text[Style["CPU's stack: " <> ToString[computerStack], 
      FontSize -> Scaled[.0275], FontFamily -> "Arial", Black], {910, -230}, 
     Left],
    
    Text[Style["Your cards", FontSize -> Scaled[.03], FontFamily -> "Arial", 
      Black], {240, -420}, Center],
    Text[Style["Your best hand", FontSize -> Scaled[.03], 
      FontFamily -> "Arial", Black], {885, -420}, Center],
    Text[Style["CPU's cards", FontSize -> Scaled[.03], FontFamily -> "Arial", 
      Black], {240, -170}, Center],
    Text[Style["CPU's best hand", FontSize -> Scaled[.03], 
      FontFamily -> "Arial", Black], {885, -170}, Center],
    If[stage != "Showdown", 
     Text[Style[stage, FontSize -> Scaled[.03], FontFamily -> "Arial", 
       Black], {400, -375}, Center]],
    
    EdgeForm[{Thick, Black}], Yellow, Disk[{530, -495}, 30],
    Text[Style["BIG", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      Black], {530, -485}, Center],
    Text[Style["BLIND", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      Black], {530, -505}, Center],
    EdgeForm[{Thick, Black}], Darker[Purple, .6], Disk[{530, -135}, 30],
    Text[Style["SMALL", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      White], {530, -125}, Center],
    Text[Style["BLIND", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      White], {530, -145}, Center],
    EdgeForm[{Thick, Black}], White, Disk[{530, -45}, 37.5],
    Text[Style["DEALER", FontSize -> Scaled[.015], FontFamily -> "Arial", 
      Black], {530, -45}, Center],
    EdgeForm[{Thick, Black}], Lighter[Blue], 
    Rectangle[{905, -250}, {1175, -350}],
    
    If[stage == "Showdown" || userCondition == "fold" || 
      cpuCondition == "fold",
     Which[
      winner == "player1" || cpuCondition == "fold", 
      Text[Style["You won this round", FontSize -> Scaled[.025], 
        FontFamily -> "Arial", Black], {1035, -300}, Center],
      winner == "CPU" || userCondition == "fold", 
      Text[Style["CPU won this round", FontSize -> Scaled[.025], 
        FontFamily -> "Arial", Black], {1040, -300}, Center],
      winner == "both", 
      Text[Style["It's a tie!", FontSize -> Scaled[.025], 
        FontFamily -> "Arial", Black], {1035, -300}, Center]
      ], Text[
      Style["Who will win?", FontSize -> Scaled[.025], FontFamily -> "Arial", 
       Black], {1035, -300}, Center]]
    }]
  ]

drawBoard2[userHand, computerHand, userbesthand, computerbesthand, "Preflop", \
"player1", 5, 5, 10, 10, 15, userStack, computerStack, "player1", "fold", \
"raise"]

\!\(\*
GraphicsBox[{{{{
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{592, -399.}, {1187.7333333333333`, -588.5}]}, 
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{0, -399.}, {592, -588.5}]}}, {
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{592, -189.5}, {1187.7333333333333`, -399.}]}, 
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{0, -189.5}, {592, -399.}]}}, {
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{592, 0}, {1187.7333333333333`, -189.5}]}, 
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{0, 0}, {592, -189.5}]}}}, {{InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{452, 169.5},
PlotRangePadding->{6, 5}], {15, -84.75}, ImageScaled[{0, 0.5}], {452, 169.5}],
        InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {495, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{562, 169.5},
PlotRangePadding->{6, 5}], {888., -84.75}, 
        ImageScaled[{0.5, 0.5}], {562, 169.5}]}, {InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {495, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{562, 169.5},
PlotRangePadding->{6, 5}], {577, -294.25}, 
        ImageScaled[{1, 0.5}], {562, 169.5}], 
TagBox[InsetBox["", {888., -294.25}, {Center, Center}, {562., 169.5}],
"InsetString"]}, {InsetBox[
RowBox[{"cardGraphics", "(", "userHand", ")"}], {15, -503.75}, {
        Left, Center}, {562, 169.5}], InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {495, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{562, 169.5},
PlotRangePadding->{6, 5}], {888., -503.75}, 
        ImageScaled[{0.5, 0.5}], {562, 169.5}]}}, {}}, {
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{600, -390}, {900, -210}], InsetBox[
StyleBox["\<\"Move: player1\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -225}, Left], InsetBox[
StyleBox["\<\"Your recent bet: 5\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -255}, Left], InsetBox[
StyleBox["\<\"Your total bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -285}, Left], InsetBox[
StyleBox["\<\"CPU's recent bet: 5\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -315}, Left], InsetBox[
StyleBox["\<\"CPU's total bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -345}, Left], InsetBox[
StyleBox["\<\"CPU's total bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -345}, Left], InsetBox[
StyleBox["\<\"Pot: 15\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -375}, Left]}, 
{RGBColor[1, 0.5, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{0, -390}, {275, -360}], InsetBox[
StyleBox["\<\"User's Move: fold\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {0, -375}, Left]}, 
{RGBColor[1, 0.5, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{0, -195}, {275, -225}], InsetBox[
StyleBox["\<\"CPU's Move: raise\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {0, -210}, Left]}, 
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{905, -390}, {1175, -350}], InsetBox[
StyleBox["\<\"Your stack: userStack\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.0275],
FontColor->GrayLevel[0]], {910, -370}, Left]}, 
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{905, -250}, {1175, -210}], InsetBox[
StyleBox["\<\"CPU's stack: computerStack\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.0275],
FontColor->GrayLevel[0]], {910, -230}, Left], InsetBox[
StyleBox["\<\"Your cards\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {240, -420}, Center], InsetBox[
StyleBox["\<\"Your best hand\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {885, -420}, Center], InsetBox[
StyleBox["\<\"CPU's cards\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {240, -170}, Center], InsetBox[
StyleBox["\<\"CPU's best hand\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {885, -170}, Center], InsetBox[
StyleBox["\<\"Preflop\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {400, -375}, Center]}, 
{RGBColor[1, 1, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      DiskBox[{530, -495}, 30], InsetBox[
StyleBox["\<\"BIG\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[0]], {530, -485}, Center], InsetBox[
StyleBox["\<\"BLIND\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[0]], {530, -505}, Center]}, 
{RGBColor[0.2, 0., 0.2], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      DiskBox[{530, -135}, 30], InsetBox[
StyleBox["\<\"SMALL\"\>",
StripOnInput->False,
LineColor->GrayLevel[1],
FrontFaceColor->GrayLevel[1],
BackFaceColor->GrayLevel[1],
GraphicsColor->GrayLevel[1],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[1]], {530, -125}, Center], InsetBox[
StyleBox["\<\"BLIND\"\>",
StripOnInput->False,
LineColor->GrayLevel[1],
FrontFaceColor->GrayLevel[1],
BackFaceColor->GrayLevel[1],
GraphicsColor->GrayLevel[1],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[1]], {530, -145}, Center]}, 
{GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      DiskBox[{530, -45}, 37.5], InsetBox[
StyleBox["\<\"DEALER\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.015],
FontColor->GrayLevel[0]], {530, -45}, Center]}, 
{RGBColor[
NCache[
Rational[1, 3], 0.3333333333333333], 
NCache[
Rational[1, 3], 0.3333333333333333], 1], EdgeForm[{GrayLevel[0], Thickness[
      Large]}], RectangleBox[{905, -250}, {1175, -350}], InsetBox[
StyleBox["\<\"You won this round\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {1035, -300}, Center]}}},
ContentSelectable->True,
ImageSize->{1000, 500},
PlotRangePadding->{6, 5}]\)

table[stage_, whoseMove_, userBet_, computerBet_, pot_] :=
 Graphics[{
   Black, Disk[{-500, 0}, {500, 375}], Rectangle[{-500, -375}, {500, 375}], 
   Disk[{500, 0}, {500, 375}],
   Darker[Gray], Disk[{-500, 0}, {470, 345}], 
   Rectangle[{-500, -345}, {500, 345}], Disk[{500, 0}, {470, 345}],
   Green, Disk[{-500, 0}, {440, 315}], Rectangle[{-500, -315}, {500, 315}], 
   Disk[{500, 0}, {440, 315}],
   
   EdgeForm[{Thick, Black}], Red, Rectangle[{375, -175}, {700, -275}], 
   Rectangle[{375, 175}, {700, 275}],
   Text[Style["Recent bet: " <> ToString[userBet], FontSize -> Scaled[.02], 
     FontFamily -> "Arial", Black], {380, -200}, Left],
   Text[Style["Total bet: " <> ToString[userBet], FontSize -> Scaled[.02], 
     FontFamily -> "Arial", Black], {380, -250}, Left],
   Text[Style["Recent bet: " <> ToString[computerBet], 
     FontSize -> Scaled[.02], FontFamily -> "Arial", Black], {380, 250}, Left],
   Text[Style["Total bet: " <> ToString[computerBet], FontSize -> Scaled[.02],
      FontFamily -> "Arial", Black], {380, 200}, Left],
   
   Text[Style["Your cards", FontSize -> Scaled[.02], FontFamily -> "Arial", 
     Black], {0, -160}, Center],
   Text[Style["Your best hand", FontSize -> Scaled[.02], 
     FontFamily -> "Arial", Black], {-700, -160}, Center],
   Text[Style["CPU's cards", FontSize -> Scaled[.02], FontFamily -> "Arial", 
     Black], {0, 160}, Center],
   Text[Style["CPU's best hand", FontSize -> Scaled[.02], 
     FontFamily -> "Arial", Black], {-700, 160}, Center],
   If[stage != "Showdown", 
    Text[Style[stage, FontSize -> Scaled[.02], FontFamily -> "Arial", 
      Black], {-500, 0}, Right]],
   If[stage == "Showdown",
    Which[
     userEquity == 100, 
     Text[Style["You won this round", FontSize -> Scaled[.02], 
       FontFamily -> "Arial", Black], {1050, -300}, Center],
     computerEquity == 100, 
     Text[Style["Computer won this round", FontSize -> Scaled[.02], 
       FontFamily -> "Arial", Black], {1100, -300}, Center],
     tieEquity == 100, 
     Text[Style["It's a tie!", FontSize -> Scaled[.02], FontFamily -> "Arial",
        Black], {1100, -300}, Center]
     ]
    ]
   }, ImageSize -> Full]

table["Flop", "player1", 15, 10, 50]

\!\(\*
GraphicsBox[{
{GrayLevel[0], DiskBox[{-500, 0}, {500., 375.}], 
     RectangleBox[{-500, -375}, {500, 375}], DiskBox[{500, 0}, {500., 375.}]}, 
{RGBColor[0.33333333333333337`, 0.33333333333333337`, 0.33333333333333337`], 
     DiskBox[{-500, 0}, {470., 345.}], RectangleBox[{-500, -345}, {500, 345}],
      DiskBox[{500, 0}, {470., 345.}]}, 
{RGBColor[0, 1, 0], DiskBox[{-500, 0}, {440., 315.}], 
     RectangleBox[{-500, -315}, {500, 315}], DiskBox[{500, 0}, {440., 315.}]}, 
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
     RectangleBox[{375, -175}, {700, -275}], 
     RectangleBox[{375, 175}, {700, 275}], InsetBox[
StyleBox["\<\"Recent bet: 15\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {380, -200}, Left], InsetBox[
StyleBox["\<\"Total bet: 15\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {380, -250}, Left], InsetBox[
StyleBox["\<\"Recent bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {380, 250}, Left], InsetBox[
StyleBox["\<\"Total bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {380, 200}, Left], InsetBox[
StyleBox["\<\"Your cards\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {0, -160}, Center], InsetBox[
StyleBox["\<\"Your best hand\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {-700, -160}, Center], InsetBox[
StyleBox["\<\"CPU's cards\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {0, 160}, Center], InsetBox[
StyleBox["\<\"CPU's best hand\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {-700, 160}, Center], InsetBox[
StyleBox["\<\"Flop\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.02],
FontColor->GrayLevel[0]], {-500, 0}, Right]}},
ImageSize->Full]\)

dealerButton = Graphics[{
    EdgeForm[{Thick, Black}], White, Disk[{0, 0}, 1.8],
    Text[Style["DEALER", FontSize -> Scaled[.225], FontFamily -> "Arial", 
      Black], {0, 0}, Center]
    }];

bigButton = Graphics[{
    EdgeForm[{Thick, Black}], Yellow, Disk[],
    Text[Style["BIG", FontSize -> Scaled[.225], FontFamily -> "Arial", 
      Black], {0, .2}, Center],
    Text[Style["BLIND", FontSize -> Scaled[.225], FontFamily -> "Arial", 
      Black], {0, -.2}, Center]
    }];

smallButton = Graphics[{
    EdgeForm[{Thick, Black}], Darker[Purple, .6], Disk[],
    Text[Style["SMALL", FontSize -> Scaled[.225], FontFamily -> "Arial", 
      White], {0, .2}, Center],
    Text[Style["BLIND", FontSize -> Scaled[.225], FontFamily -> "Arial", 
      White], {0, -.2}, Center]
    }];

drawBoard[userHand, computerHand, userbesthand, computerbesthand, "Preflop", \
"player1", 5, 5, 10, 10, 15, userStack, computerStack, "player1", "raise", \
"raise"]

\!\(\*
GraphicsBox[{{{{
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{592, -399.}, {1187.7333333333333`, -588.5}]}, 
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{0, -399.}, {592, -588.5}]}}, {
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{592, -189.5}, {1187.7333333333333`, -399.}]}, 
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{0, -189.5}, {592, -399.}]}}, {
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{592, 0}, {1187.7333333333333`, -189.5}]}, 
{RGBColor[0, 
NCache[
Rational[2, 3], 0.6666666666666666], 0], 
        RectangleBox[{0, 0}, {592, -189.5}]}}}, {{InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{452, 169.5},
PlotRangePadding->{6, 5}], {15, -84.75}, ImageScaled[{0, 0.5}], {452, 169.5}],
        InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {495, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{562, 169.5},
PlotRangePadding->{6, 5}], {888., -84.75}, 
        ImageScaled[{0.5, 0.5}], {562, 169.5}]}, {InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {495, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{562, 169.5},
PlotRangePadding->{6, 5}], {577, -294.25}, 
        ImageScaled[{1, 0.5}], {562, 169.5}], 
TagBox[InsetBox["", {888., -294.25}, {Center, Center}, {562., 169.5}],
"InsetString"]}, {InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1], InsetBox[
InterpretationBox[4,
Text[
Style[4, FontSize -> Scaled[0.3], FontFamily -> "Arial", Bold, 
RGBColor[1, 0, 0]]]], {1.5, 2.8}, Automatic, Automatic], InsetBox[
FormBox[
GraphicsBox[
TagBox[RasterBox[CompressedData["
1:eJztnVuIVVUcxv+pmd3rITAro7Q7hZVdHjLo9tAFIS1KrcgpgzKQxikvVFQQ
FNlDGSYl9VAERWAllZViBFmRjjNn9jhkWUQRGZiXmSENzb6/Zx+a9MyZc/bZ
e31r7f3/wSeODJ61vu+svddee11Oa5kz5b5hIjJ3FP6YMnPeVa2tMxdMHYEf
rl7QNqtlOP7yMjQf0n80DMMwDMMwDMMwDMMwDMMwDCM5JZGJkchD7HIY6fOO
yPAukXaot1vkVHZ5jHRBu22F9sX6gF0eIz2Q51httwPy3Yefp7LLZaSDtteB
2cb6dZPIMeyyGc2h7bRKtpU2vJhdPiM52j61nQ6WL7QHupRdTiMZaJ8v1ci2
0obb19g0peDAM9BlcfusmW+ccRu7vEb9ILORyCyqJ9tY/fj9cexyG/WBrJ5s
INuKPt8ncgi77EZtkNME6O8E+ep1+n52+Y3B0X4SMlqfJNs43506FsKuh1Ed
5LMwabYD9Am7HsbBINtzoF0p5Ku6m10f4z/03RAyWZtStqo/e0TGsOtllIn+
/24oFeFa8B67XobIRpEz9fk17XxjTWfXr8jE7+y/zijb/dfpDSInsetZVJDt
oxlmW9GnNu7hnm6RC5Hvbgf5qmaz61skNokchmy7HGWr6sP36Qx2vYsCsl3k
MNv9wmd+pfd7dt3zDtrRlfB6r+t844wXsuufZ3pEjobPPzKyjfPdrfd9tg95
BR6/ysp2QMZdev9ne5E34OsUdrYD9ALbjzyBbE+BtnqQa6UN/1MSuZHtSx6I
3x2sYWdaRb9Do9n+hE5K73Sz0kob20pOPAcy0Vwbh2pl+xQi8bPQZg/yqyl7
ZkoGvHuDnV0D6ukQOZLtWSjAr+keZNZoO36F7VsI6Pt6eLWDnVfCjG9j++cz
P4mM0vVA7JyayHeHfj/ZPvoK/FnKziiFjNv1e8r20jeiAO+5NTJeyvbTJzpF
zorXDtCzSVHT2L76wDqRI+BFpwd5pN2Gd+r3lu0vG32uYGeRoTrWihzO9phF
SeQODzLIuh0X8rm4W+Q81L+P7b+jjO9i++0S3HOPRZ2/Y/vuULq+YgLbdxfo
+zRku9wDz11rM+5Hx7P9zxrUc74HXlOE7/VH+H4PY2eQFfj+XhfVuadNXoWM
n2DnkAWo21joD7a/bOncLfQtb2DnkSY6nxR1+5btrUfalqf9mFCfZR546ps6
dOyOnU2zoB6zPPDSS6ENv8XOpxlQhyscruEMUvDnEXZOSdA56ZH1p+rRntD6
W3pfQb4bPPAuFG3Hs+PZ7NzqQcenUN63PfAsKKE9fK/jtuz8hsLRnhh51Uqf
15CjfJP1+d0Dn4IV/HuenWM1OkXOD3Veq2/y7X1iu8gJev9g+5IX6T6auvaK
nauC8oyEvmR7kkPps+V4Zrbxu9w3PfAiryox+9T4/Mc88CDXQvtZjYwPJWQ7
w/rKzrTEZbZ670e2f3lQ78IIfj/sIlt81vjIxpUZ0nkvk7PMVu/1+IySB3Ut
qvo3ilyUVb66FzI+Y4sH9Syq9uA6fVNW+SrxnidZ7ZduqiFk+0CW2VYoidxs
fWfnctqHjgo8j9m10JbeZ7xXyvnaP19UYp0zHpXP6VztgQd51S+dIiczsq0Q
rxXr9sCLvKkf/ZyJzGwrRDbmkbYyH8toFDw3TbK5sKlpHjvPaiDfez3wJmjp
+1Z2jrVA+V5kexSq9Cw23/friM+MW8X2KkDR+8r1ouvUbT5WQ+r3Zb5VvaDM
50LbPfAuBM1g55UEPYMiKvh6/aGE69wz7JyaQdfHsT30WCt8Xq9QD7Yeqbp0
f6gQ1hvVg+5d7/i8T68FL3p1fzd2Lmmi56tG1t+q7K9yKzuPLNC5JTYvQJ5j
55Aluv+TBx6z2u6q0PtTQ6H7t6GeH7K9JmT7s67DY/vvgg0ixxVpfEvXAvjy
LtcVqO8FUUHmYaKuLWy/Geg6Zrb3DrSM7TOTKN9723XmYY+6ZrDzNfJPTs/H
mc721SeQ7+0eZJJW27XzraoAb5aws0khWzufbhB0n2j4s56dURPS8XXqnii+
E5XnUof6HuIWtn8hoOfoepBVo3K6vi90kPFrHmRWl1DWyPd5rb4B344K4Qws
HVvWvRnZfoVISeTiANa8PMj2KWSQb5sHGQ6mFTq/jO1RyMR7IH7mQZYHXpd/
K8r73KzZKHJi5NH603gO1bVsX/KEZ3O3nmX7kUeQ72J2tvH42ki2F3kkPpeF
9sykz0J5m7fsG7gXXx7x1jTNZde/CMDnpwlt94u8z231hah8JkCHw2x7SyKn
s+tdJOLzWnY5yngWu75FJHKwRyK+Qx/bGBUHvR9GGZ7dgmy39oiMYdezyETl
+QB9GWU8jV0/Y/+4x5wM2u5ydr2MMvF1em2K+W6z67Jf6LhSWv1p/D/3sOtj
HAyyeTyFbFdZf9lPovK4RzPnu/Qh33HsehiDg3wuiZKPT7eyy28MDTJelOC6
/I2NL4dBvCbxhway3W1zIMMC/elr6p3vgd97il1eo3HqOZtY9wGx9WBhgvxG
61hFrXzRzq9nl9NIDjKcXSPfd9nlM5ojHrtcV+W63BvKfulGbfSZGNp7QL5t
7HIZ6REN2BtA97JdIzKCXSYjPXTPPGS7JV57MIldHiN9kO2d0OvschjZoO+F
WGdxGoZhGIZhGIYRBv8C7ey+Ng==
"], {{0, 151}, {120, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSizeRaw->{120, 151},
PlotRange->{{0, 120}, {0, 151}}],
TraditionalForm], {1.5, 1.333}, Automatic, 1]},
Background->GrayLevel[0, 0],
ImagePadding->None,
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1], InsetBox[
InterpretationBox[K,
Text[
Style["K", FontSize -> Scaled[0.3], FontFamily -> "Arial", Bold, 
GrayLevel[0]]]], {1.5, 2.8}, Automatic, Automatic], InsetBox[
FormBox[
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
IAiCIAhCefkfLpPBXA==
"], {{0, 150}, {120, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSizeRaw->{120, 150},
PlotRange->{{0, 120}, {0, 150}}],
TraditionalForm], {1.5, 1.333}, Automatic, 1]},
Background->GrayLevel[0, 0],
ImagePadding->None,
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1], InsetBox[
InterpretationBox[6,
Text[
Style[6, FontSize -> Scaled[0.3], FontFamily -> "Arial", Bold, 
GrayLevel[0]]]], {1.5, 2.8}, Automatic, Automatic], InsetBox[
FormBox[
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
IAiCIAhCefkfLpPBXA==
"], {{0, 150}, {120, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSizeRaw->{120, 150},
PlotRange->{{0, 120}, {0, 150}}],
TraditionalForm], {1.5, 1.333}, Automatic, 1]},
Background->GrayLevel[0, 0],
ImagePadding->None,
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1], InsetBox[
InterpretationBox[10,
Text[
Style[10, FontSize -> Scaled[0.3], FontFamily -> "Arial", Bold, 
RGBColor[1, 0, 0]]]], {1.5, 2.8}, Automatic, Automatic], InsetBox[
FormBox[
GraphicsBox[
TagBox[RasterBox[CompressedData["
1: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
WGdxGoZhGIZhGIYRBv8C7ey+Ng==
"], {{0, 151}, {120, 0}}, {0, 255},
ColorFunction->RGBColor],
BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
Selectable->False],
BaseStyle->"ImageGraphics",
ImageSizeRaw->{120, 151},
PlotRange->{{0, 120}, {0, 151}}],
TraditionalForm], {1.5, 1.333}, Automatic, 1]},
Background->GrayLevel[0, 0],
ImagePadding->None,
ImageSize->{100, 150}], {385, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{452, 169.5},
PlotRangePadding->{6, 5}], {15, -503.75}, 
        ImageScaled[{0, 0.5}], {452, 169.5}], InsetBox[
GraphicsBox[{{}, {InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {55, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {165, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {275, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {385, -78.75}, ImageScaled[{0.5, 0.5}], {100, 150}], 
           InsetBox[
GraphicsBox[
{GrayLevel[0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
              RectangleBox[{0, 0}, {3, 4},
RoundingRadius->0.1]},
ImageSize->{100, 150}], {495, -78.75}, 
            ImageScaled[{0.5, 0.5}], {100, 150}]}, {}},
ContentSelectable->True,
ImageSize->{562, 169.5},
PlotRangePadding->{6, 5}], {888., -503.75}, 
        ImageScaled[{0.5, 0.5}], {562, 169.5}]}}, {}}, {
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{600, -390}, {900, -210}], InsetBox[
StyleBox["\<\"Move: player1\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -225}, Left], InsetBox[
StyleBox["\<\"Your recent bet: 5\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -255}, Left], InsetBox[
StyleBox["\<\"Your total bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -285}, Left], InsetBox[
StyleBox["\<\"CPU's recent bet: 5\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -315}, Left], InsetBox[
StyleBox["\<\"CPU's total bet: 10\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -345}, Left], InsetBox[
StyleBox["\<\"Pot: 15\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {605, -375}, Left]}, 
{RGBColor[1, 0.5, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{0, -390}, {275, -360}], InsetBox[
StyleBox["\<\"User's Move: raise\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {0, -375}, Left]}, 
{RGBColor[1, 0.5, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{0, -195}, {275, -225}], InsetBox[
StyleBox["\<\"CPU's Move: raise\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {0, -210}, Left]}, 
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{905, -390}, {1175, -350}], InsetBox[
StyleBox["\<\"Your stack: 1030\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.0275],
FontColor->GrayLevel[0]], {910, -370}, Left]}, 
{RGBColor[1, 0, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      RectangleBox[{905, -250}, {1175, -210}], InsetBox[
StyleBox["\<\"CPU's stack: 970\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.0275],
FontColor->GrayLevel[0]], {910, -230}, Left], InsetBox[
StyleBox["\<\"Your cards\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {240, -420}, Center], InsetBox[
StyleBox["\<\"Your best hand\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {885, -420}, Center], InsetBox[
StyleBox["\<\"CPU's cards\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {240, -170}, Center], InsetBox[
StyleBox["\<\"CPU's best hand\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {885, -170}, Center], InsetBox[
StyleBox["\<\"Preflop\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.03],
FontColor->GrayLevel[0]], {400, -375}, Center]}, 
{RGBColor[1, 1, 0], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      DiskBox[{530, -75}, 30], InsetBox[
StyleBox["\<\"BIG\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[0]], {530, -65}, Center], InsetBox[
StyleBox["\<\"BLIND\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[0]], {530, -85}, Center]}, 
{RGBColor[0.2, 0., 0.2], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      DiskBox[{530, -450}, 30], InsetBox[
StyleBox["\<\"SMALL\"\>",
StripOnInput->False,
LineColor->GrayLevel[1],
FrontFaceColor->GrayLevel[1],
BackFaceColor->GrayLevel[1],
GraphicsColor->GrayLevel[1],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[1]], {530, -440}, Center], InsetBox[
StyleBox["\<\"BLIND\"\>",
StripOnInput->False,
LineColor->GrayLevel[1],
FrontFaceColor->GrayLevel[1],
BackFaceColor->GrayLevel[1],
GraphicsColor->GrayLevel[1],
FontFamily->"Arial",
FontSize->Scaled[0.013],
FontColor->GrayLevel[1]], {530, -460}, Center]}, 
{GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[Large]}], 
      DiskBox[{530, -540}, 37.5], InsetBox[
StyleBox["\<\"DEALER\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.015],
FontColor->GrayLevel[0]], {530, -540}, Center]}, 
{RGBColor[
NCache[
Rational[1, 3], 0.3333333333333333], 
NCache[
Rational[1, 3], 0.3333333333333333], 1], EdgeForm[{GrayLevel[0], Thickness[
      Large]}], RectangleBox[{905, -250}, {1175, -350}], InsetBox[
StyleBox["\<\"Who will win?\"\>",
StripOnInput->False,
LineColor->GrayLevel[0],
FrontFaceColor->GrayLevel[0],
BackFaceColor->GrayLevel[0],
GraphicsColor->GrayLevel[0],
FontFamily->"Arial",
FontSize->Scaled[0.025],
FontColor->GrayLevel[0]], {1035, -300}, Center]}}},
ContentSelectable->True,
ImageSize->{1000, 500},
PlotRangePadding->{6, 5}]\)

drawBoard[userHand_, computerHand_, userbesthand_, computerbesthand_, stage_, 
  whoseMove_, userBet_, computerBet_, uTotalBet_, cTotalBet_, pot_, 
  userStack_, computerStack_, winner_, userCondition_, cpuCondition_] :=
 Show[
  GraphicsGrid[{
    If[stage != "Showdown",
     {GraphicsRow[{blackCard, blackCard, blackCard, blackCard}, 10],
      GraphicsRow[{blackCard, blackCard, blackCard, blackCard, blackCard}, 
       10]},
     {cardGraphics[computerHand], cardGraphics[computerbesthand[[1]]]}
     ],
    If[stage == "Preflop",
     {GraphicsRow[{blackCard, blackCard, blackCard, blackCard, blackCard}, 
       10]},
     If[stage == "Flop",
      {shadeCardsBoard[flop, userbesthand]},
      If[stage == "Turn",
       {shadeCardsBoard[board[[1 ;; 4]], userbesthand]},
       If[stage == "River" || stage == "Showdown",
        {shadeCardsBoard[board, userbesthand]}]]]],
    If[stage != "Preflop",
     {shadeCardsHand[userHand, userbesthand], cardGraphics[userbesthand[[1]]]},
     {cardGraphics[userHand]
      , GraphicsRow[{blackCard, blackCard, blackCard, blackCard, blackCard}, 
       10]}]
    },
   Background -> Darker[Green],
   Alignment -> {Center, 
     Automatic, {{1, 1} -> Left, {2, 1} -> Right, {3, 1} -> Left}},
   Spacings -> {{30, 30}, {0, 40, 40, 0}},
   ImageSize -> {1000, 500},
   Frame -> None
   ],
  Graphics[{
    EdgeForm[{Thick, Black}], Red, Rectangle[{600, -390}, {900, -210}],
    Text[Style["Move: " <> whoseMove, FontSize -> Scaled[.025], 
      FontFamily -> "Arial", Black], {605, -225}, Left],
    Text[Style["Your recent bet: " <> ToString[userBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -255}, 
     Left],
    Text[Style["Your total bet: " <> ToString[uTotalBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -285}, 
     Left],
    Text[Style["CPU's recent bet: " <> ToString[computerBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -315}, 
     Left],
    Text[Style["CPU's total bet: " <> ToString[cTotalBet], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {605, -345}, 
     Left],
    Text[Style["Pot: " <> ToString[pot], FontSize -> Scaled[.025], 
      FontFamily -> "Arial", Black], {605, -375}, Left],
    
    EdgeForm[{Thick, Black}], Orange, Rectangle[{0, -390}, {275, -360}], 
    Text[Style["User's Move: " <> ToString[userCondition], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {0, -375}, 
     Left],
    EdgeForm[{Thick, Black}], Orange, Rectangle[{0, -195}, {275, -225}],
    Text[Style["CPU's Move: " <> ToString[cpuCondition], 
      FontSize -> Scaled[.025], FontFamily -> "Arial", Black], {0, -210}, 
     Left],
    
    EdgeForm[{Thick, Black}], Red, Rectangle[{905, -390}, {1175, -350}],
    Text[Style["Your stack: " <> ToString[userStack], 
      FontSize -> Scaled[.0275], FontFamily -> "Arial", Black], {910, -370}, 
     Left],
    EdgeForm[{Thick, Black}], Red, Rectangle[{905, -250}, {1175, -210}],
    Text[Style["CPU's stack: " <> ToString[computerStack], 
      FontSize -> Scaled[.0275], FontFamily -> "Arial", Black], {910, -230}, 
     Left],
    
    Text[Style["Your cards", FontSize -> Scaled[.03], FontFamily -> "Arial", 
      Black], {240, -420}, Center],
    Text[Style["Your best hand", FontSize -> Scaled[.03], 
      FontFamily -> "Arial", Black], {885, -420}, Center],
    Text[Style["CPU's cards", FontSize -> Scaled[.03], FontFamily -> "Arial", 
      Black], {240, -170}, Center],
    Text[Style["CPU's best hand", FontSize -> Scaled[.03], 
      FontFamily -> "Arial", Black], {885, -170}, Center],
    If[stage != "Showdown", 
     Text[Style[stage, FontSize -> Scaled[.03], FontFamily -> "Arial", 
       Black], {400, -375}, Center]],
    
    EdgeForm[{Thick, Black}], Yellow, Disk[{530, -75}, 30],
    Text[Style["BIG", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      Black], {530, -65}, Center],
    Text[Style["BLIND", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      Black], {530, -85}, Center],
    EdgeForm[{Thick, Black}], Darker[Purple, .6], Disk[{530, -450}, 30],
    Text[Style["SMALL", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      White], {530, -440}, Center],
    Text[Style["BLIND", FontSize -> Scaled[.013], FontFamily -> "Arial", 
      White], {530, -460}, Center],
    EdgeForm[{Thick, Black}], White, Disk[{530, -540}, 37.5],
    Text[Style["DEALER", FontSize -> Scaled[.015], FontFamily -> "Arial", 
      Black], {530, -540}, Center],
    EdgeForm[{Thick, Black}], Lighter[Blue], 
    Rectangle[{905, -250}, {1175, -350}],
    
    If[stage == "Showdown" || userCondition == "fold" || 
      cpuCondition == "fold",
     Which[
      winner == "player1" || cpuCondition == "fold", 
      Text[Style["You won this round", FontSize -> Scaled[.025], 
        FontFamily -> "Arial", Black], {1035, -300}, Center],
      winner == "CPU" || userCondition == "fold", 
      Text[Style["CPU won this round", FontSize -> Scaled[.025], 
        FontFamily -> "Arial", Black], {1040, -300}, Center],
      winner == "both", 
      Text[Style["It's a tie!", FontSize -> Scaled[.025], 
        FontFamily -> "Arial", Black], {1035, -300}, Center]
      ], Text[
      Style["Who will win?", FontSize -> Scaled[.025], FontFamily -> "Arial", 
       Black], {1035, -300}, Center]]
    }]
  ]

Manipulate

Manipulate[
 Overlay[{
   If[inGame == True,
    Which[
     bigBlindMove == "Computer",
     drawBoard[userHand, computerHand, userbesthand, computerbesthand, stage, 
      whoseMove, userBet, computerBet, uTotalBet, cTotalBet, pot, userStack, 
      computerStack, winner, userCondition, cpuCondition],
     bigBlindMove == "player1",
     drawBoard2[userHand, computerHand, userbesthand, computerbesthand, stage,
       whoseMove, userBet, computerBet, uTotalBet, cTotalBet, pot, userStack, 
      computerStack, winner, userCondition, cpuCondition]
     ],
    Graphics[{
      Text[
       Style["Welcome to Pot-Limit Omaha!", FontSize -> Scaled[.1], 
        FontFamily -> "Arial", Black], {0, 2}],
      Text[
       Style["Start by setting the Small Blind and the", 
        FontSize -> Scaled[.1], FontFamily -> "Arial", Black], {0, 1.5}],
      Text[
       Style["stack sizes using the sliders above.", FontSize -> Scaled[.1], 
        FontFamily -> "Arial", Black], {0, 1.25}],
      Text[
       Style["You can click on the gray '+' to set specific amounts.", 
        FontSize -> Scaled[.1], FontFamily -> "Arial", Black], {0, .75}],
      Text[
       Style["You will be playing a computer that strategizes", 
        FontSize -> Scaled[.1], FontFamily -> "Arial", Black], {0, .25}],
      Text[
       Style["its decisions based on the equity by the river.", 
        FontSize -> Scaled[.1], FontFamily -> "Arial", Black], {0, 0}],
      Text[
       Style["Good luck, and click 'New Game' to begin playing!", 
        FontSize -> Scaled[.1], FontFamily -> "Arial", Black], {0, -.5}]
      }, ImageSize -> {1000, 500}]
    ]
   }, Background -> Darker[Green]],
 
 (* card states *)
 {shuffledDeck, {}, ControlType -> None},
 
 (* pot states *)
 {{SmallBlind, 5}, 1, 6, 1},
 {{pot, 3*SmallBlind}, ControlType -> None},
 {{StackSize, 1000}, 500, 1000, 1},
 {{minRaise, 2*SmallBlind}, ControlType -> None},
 {{maxRaise, 5*SmallBlind}, ControlType -> None},
 {{minBet, 2*SmallBlind}, ControlType -> None},
 {{maxBet, pot}, ControlType -> None},
 {{userBet, SmallBlind}, ControlType -> None}, {{uTotalBet, SmallBlind}, 
  ControlType -> None},
 {{computerBet, 2*SmallBlind}, 
  ControlType -> None}, {{cTotalBet, 2*SmallBlind}, ControlType -> None},
 
 (* game states *)
 {stage, "Preflop", ControlType -> None},
 {whoseMove, "player1", ControlType -> None},
 {inGame, False, ControlType -> None},
 {bigBlindMove, "Computer", ControlType -> None},
 {winner, "", ControlType -> None},
 {userCondition, "", ControlType -> None},
 {cpuCondition, "", ControlType -> None},
 
 (* control states *)
 {canNextRound, False, ControlType -> None},
 {canFold, False, ControlType -> None},
 {canBet, False, ControlType -> None},
 {canCheck, False, ControlType -> None},
 {canCall, False, ControlType -> None},
 {canRaise, False, ControlType -> None},
 
 (* controls *)
 
 Row[{Button["New game", newGameAction, Method -> "Queued"]}],
 Row[{Button["Next round", nextRoundAction, Enabled -> canNextRound, 
    Method -> "Queued"]}],
 Row[{
   Button["Fold", foldAction, Enabled -> canFold, Method -> "Queued"],
   Button["Check", checkAction, Enabled -> canCheck, Method -> "Queued"],
   Button["Call", callAction, Enabled -> canCall, Method -> "Queued"],
   Button["Bet", betAction, Enabled -> canBet, Method -> "Queued"],
   Button["Raise", raiseAction, Enabled -> canRaise, Method -> "Queued"]
   }],
 
 {{BetRange, maxBet}, minBet, maxBet, 1, Enabled -> canBet},
 {{RaiseRange, maxRaise}, minRaise, maxRaise, 1, Enabled -> canRaise},
 
 Initialization :> (
   
   newGameAction := (
     Clear[userbesthand, computerbesthand, userEquity, computerEquity, 
      tieEquity, new];
     shuffledDeck = 
      RandomSample[
       Flatten[Table[{rank, suit}, {rank, 2, 14}, {suit, 1, 4}], 1]];
     inGame = True; stage = "Preflop"; whoseMove = "player1";
     userHand = shuffledDeck[[1 ;; 4]]; 
     computerHand = shuffledDeck[[5 ;; 8]];
     restOfDeck1 = shuffledDeck[[9 ;;]];
     restOfDeck2 = Nest[Rest, restOfDeck1, 3];
     restOfDeck3 = Rest[restOfDeck2];
     board = restOfDeck1[[;; 5]];
     flop = board[[1 ;; 3]];
     turn1 = board[[2 ;; 4]];
     turn2 = Table[board[[i]], {i, {1, 2, 4}}];
     turn3 = Table[board[[i]], {i, {1, 3, 4}}];
     river1 = board[[3 ;;]]; river2 = Table[board[[i]], {i, {1, 2, 5}}];
     river3 = Table[board[[i]], {i, {1, 3, 5}}]; 
     river4 = Table[board[[i]], {i, {1, 4, 5}}];
     river5 = Table[board[[i]], {i, {2, 3, 5}}]; 
     river6 = Table[board[[i]], {i, {2, 4, 5}}];
     uHand1 = userHand[[1 ;; 2]];
     uHand2 = userHand[[2 ;; 3]];
     uHand3 = userHand[[3 ;; 4]];
     uHand4 = Table[userHand[[i]], {i, {1, 3}}];
     uHand5 = Table[userHand[[i]], {i, {2, 4}}];
     uHand6 = Table[userHand[[i]], {i, {1, 4}}];
     cHand1 = computerHand[[1 ;; 2]];
     cHand2 = computerHand[[2 ;; 3]];
     cHand3 = computerHand[[3 ;; 4]];
     cHand4 = Table[computerHand[[i]], {i, {1, 3}}];
     cHand5 = Table[computerHand[[i]], {i, {2, 4}}];
     cHand6 = Table[computerHand[[i]], {i, {1, 4}}];
     userBet = SmallBlind; computerBet = 2*SmallBlind; pot = 3*SmallBlind;
     uTotalBet = SmallBlind; cTotalBet = 2*SmallBlind; winner = ""; 
     userCondition = ""; cpuCondition = "";
     userStack = StackSize - userBet; 
     computerStack = StackSize - computerBet;
     canFold = True; canCheck = False; canBet = False; canCall = True; 
     canRaise = True; canNextRound = False;
     );
   
   nextRoundAction := (
     Clear[userbesthand, computerbesthand, userEquity, computerEquity, 
      tieEquity, new];
     inGame = True; stage = "Preflop"; whoseMove = "player1"; 
     canNextRound = False;
     shuffledDeck = 
      RandomSample[
       Flatten[Table[{rank, suit}, {rank, 2, 14}, {suit, 1, 4}], 1]];
     userHand = shuffledDeck[[1 ;; 4]]; 
     computerHand = shuffledDeck[[5 ;; 8]];
     restOfDeck1 = shuffledDeck[[9 ;;]];
     restOfDeck2 = Nest[Rest, restOfDeck1, 3];
     restOfDeck3 = Rest[restOfDeck2];
     board = restOfDeck1[[;; 5]];
     flop = board[[1 ;; 3]];
     turn1 = board[[2 ;; 4]];
     turn2 = Table[board[[i]], {i, {1, 2, 4}}];
     turn3 = Table[board[[i]], {i, {1, 3, 4}}];
     river1 = board[[3 ;;]]; river2 = Table[board[[i]], {i, {1, 2, 5}}];
     river3 = Table[board[[i]], {i, {1, 3, 5}}]; 
     river4 = Table[board[[i]], {i, {1, 4, 5}}];
     river5 = Table[board[[i]], {i, {2, 3, 5}}]; 
     river6 = Table[board[[i]], {i, {2, 4, 5}}];
     uHand1 = userHand[[1 ;; 2]];
     uHand2 = userHand[[2 ;; 3]];
     uHand3 = userHand[[3 ;; 4]];
     uHand4 = Table[userHand[[i]], {i, {1, 3}}];
     uHand5 = Table[userHand[[i]], {i, {2, 4}}];
     uHand6 = Table[userHand[[i]], {i, {1, 4}}];
     cHand1 = computerHand[[1 ;; 2]];
     cHand2 = computerHand[[2 ;; 3]];
     cHand3 = computerHand[[3 ;; 4]];
     cHand4 = Table[computerHand[[i]], {i, {1, 3}}];
     cHand5 = Table[computerHand[[i]], {i, {2, 4}}];
     cHand6 = Table[computerHand[[i]], {i, {1, 4}}];
     If[userBet == SmallBlind, computerBet = SmallBlind; 
      userBet = 2*SmallBlind;, userBet = SmallBlind; 
      computerBet = 2*SmallBlind;];
     pot = 3*SmallBlind;
     minBet = SmallBlind; maxBet = pot; minRaise = 2*SmallBlind; 
     maxRaise = 5*SmallBlind;
     uTotalBet = userBet; cTotalBet = computerBet;
     winner = ""; userCondition = ""; cpuCondition = "";
     whoseMove = bigBlindMove;
     If[bigBlindMove == "Computer", bigBlindMove = "player1";, 
      bigBlindMove = "Computer";];
     userStack = userStack - userBet; 
     computerStack = computerStack - computerBet;
     If[whoseMove == "player1",
      canFold = True; canCheck = False; canBet = False; canCall = True; 
      canRaise = True; canNextRound = False;,
      canFold = False; canCheck = False; canBet = False; canCall = False; 
      canRaise = False; canNextRound = False;
      computerTurn;]
     );
   
   updateBets[betValue_Integer] := (
     If[whoseMove == "player1",
      whoseMove = "Computer";
      userBet += betValue; uTotalBet += betValue; 
      userStack = userStack - betValue;,
      whoseMove = "player1";
      computerBet += betValue; cTotalBet += betValue; 
      computerStack = computerStack - betValue;
      ];
     minRaise = 2*Abs[userBet - computerBet]; pot += betValue; 
     maxRaise = minRaise + pot;
     maxBet = pot;
     If[whoseMove == "player1",
      If[maxRaise > userStack,
        maxRaise = userStack;
        If[minRaise > userStack, minRaise = userStack;]];,
      If[maxRaise > computerStack,
        maxRaise = computerStack;
        If[minRaise > computerStack, minRaise = computerStack;]];
      ];
     If[whoseMove == "player1",
      If[maxBet > userStack,
        maxBet = userStack;
        If[minBet > userStack, minBet = userStack;]];,
      If[maxBet > computerStack,
        maxBet = computerStack;
        If[minBet > computerStack, minBet = computerStack;]];
      ];
     );
   
   flopChange := (
     bestFlop[userbesthand, uHand1, uHand2, uHand3, uHand4, uHand5, uHand6];
     bestFlop[computerbesthand, cHand1, cHand2, cHand3, cHand4, cHand5, 
      cHand6];
     equityRow = flopEquity[userbesthand, computerbesthand];
     userEquity = equityRow[[1]]; computerEquity = equityRow[[2]]; 
     tieEquity = equityRow[[3]];
     );
   
   turnChange := (
     userbesthand = 
      bestTurn[userbesthand, uHand1, uHand2, uHand3, uHand4, uHand5, uHand6];
     computerbesthand = 
      bestTurn[computerbesthand, cHand1, cHand2, cHand3, cHand4, cHand5, 
       cHand6];
     equityRow = turnEquity[userbesthand, computerbesthand];
     userEquity = equityRow[[1]]; computerEquity = equityRow[[2]]; 
     tieEquity = equityRow[[3]];
     );
   
   riverChange := (
     userbesthand = 
      bestRiver[userbesthand, uHand1, uHand2, uHand3, uHand4, uHand5, 
       uHand6];
     computerbesthand = 
      bestRiver[computerbesthand, cHand1, cHand2, cHand3, cHand4, cHand5, 
       cHand6];
     equityRow = riverEquity[userbesthand, computerbesthand];
     userEquity = equityRow[[1]]; computerEquity = equityRow[[2]]; 
     tieEquity = equityRow[[3]];
     );
   
   stageChange := (
     userBet = 0; computerBet = 0;
     Which[
      stage == "Preflop",
      flopChange;
      userCondition = ""; cpuCondition = "";
      stage = "Flop";
      If[bigBlindMove == "Computer", computerTurn;];
      canFold = True; canCheck = True; canBet = True; canCall = False; 
      canRaise = False; canNextRound = False;,
      
      stage == "Flop",
      turnChange;
      userCondition = ""; cpuCondition = "";
      stage = "Turn";
      If[bigBlindMove == "Computer", computerTurn;];
      canFold = True; canCheck = True; canBet = True; canCall = False; 
      canRaise = False; canNextRound = False;,
      
      stage == "Turn",
      riverChange;
      userCondition = ""; cpuCondition = "";
      stage = "River";
      If[bigBlindMove == "Computer", computerTurn;];
      canFold = True; canCheck = True; canBet = True; canCall = False; 
      canRaise = False; canNextRound = False;,
      
      stage == "River", stage = "Showdown";
      If[userEquity == 100, winner = "player1"; userStack += pot;,
       If[computerEquity == 100, winner = "CPU"; computerStack += pot,
        winner = "both"; userStack += (pot/2); computerStack += (pot/2);]];
      userCondition = ""; cpuCondition = "";
      canFold = False; canBet = False; canCheck = False; canCall = False; 
      canRaise = False;
      canNextRound = True;
      ];
     );
   
   callAction := (
     userCondition = "call";
     canFold = False; canBet = False; canCheck = False; canCall = False; 
     canRaise = False;
     updateBets[Abs[userBet - computerBet]]; stageChange;
     );
   
   foldAction := (
     userCondition = "fold";
     canFold = False; canBet = False; canCheck = False; canCall = False; 
     canRaise = False;
     userBet = 0; computerBet = 0; uTotalBet = 0; cTotalBet = 0; 
     canNextRound = True;
     computerStack += pot; winner = "Computer";
     pot = 0;
     );
   
   betAction := (
     userCondition = "bet";
     canBet = False; canCheck = False; canRaise = True; canCall = True;
     updateBets[BetRange];
     computerTurn;
     );
   
   raiseAction := (
     userCondition = "raise";
     updateBets[RaiseRange];
     computerTurn;
     );
   
   checkAction := (
     If[stage != "Preflop",
       userCondition = "check";
       canBet = False; canCheck = False; canRaise = True; canCall = True;
       computerTurn;,
       stageChange;];
     );
   
   computerNewEquity := (4*
      Power[((computerEquity + (tieEquity/2))/100) - .5, 2]);
   
   computerFoldAction := (
     canFold = False; canBet = False; canCheck = False; canCall = False; 
     canRaise = False;
     userBet = 0; computerBet = 0; uTotalBet = 0; cTotalBet = 0; 
     canNextRound = True;
     userStack += pot; winner = "player1"; cpuCondition = "fold";
     pot = 0;
     );
   
   computerCheckAction := (
     If[userBet != computerBet,
       computerCallAction;,
       If[userCondition == "check" || userCondition == "", 
         cpuCondition = "check";];
       ];
     );
   
   computerCallAction := (
     cpuCondition = "call";
     canFold = False; canBet = False; canCheck = False; canCall = False; 
     canRaise = False;
     updateBets[Abs[userBet - computerBet]];
     );
   
   computerBetAction := (
     If[userCondition == "check";,
       updateBets[RandomInteger[{minBet, maxBet}]]; cpuCondition = "bet";
       canBet = False; canCheck = False; canRaise = True; canCall = True;,
       If[userCondition == "bet", computerRaiseAction;];
       ];
     );
   
   computerRaiseAction := (
     updateBets[RandomInteger[{minRaise, maxRaise}]]; cpuCondition = "raise";
     );
   
   computerTurn := (
     whoseMove = "Computer"; new = computerNewEquity;
     If[stage != "Preflop",
      If[bigBlindMove == "Computer" && cpuCondition == "", 
       computerCheckAction;,
       If[userCondition == "check",
        RandomChoice[{new, 1 - new} -> {computerCheckAction;, 
            computerBetAction;}];,
        If[(computerEquity + (tieEquity/2)) < (100/3),
         RandomChoice[{new, ((1 - new)/2), ((1 - new)/
               2)} -> {computerFoldAction;, computerCheckAction;, 
             computerBetAction;}];,
         If[(computerEquity + (tieEquity/2)) >= (200/3),
          RandomChoice[{((1 - new)/2), ((1 - new)/2), 
              new} -> {computerFoldAction;, computerCheckAction;, 
              computerBetAction;}];,
          RandomChoice[{new, 1 - new} -> {computerCheckAction;, 
              computerBetAction;}];]]]]
      , computerCallAction;];
     whoseMove = "player1";
     If[bigBlindMove == 
        "Computer" && (cpuCondition == 
          "call" || (cpuCondition == "check" && userCondition == "check")), 
      stageChange;];
     If[bigBlindMove == "player1" && cpuCondition == "call" && 
       userCondition == "" && computerBet == 2*SmallBlind && 
       stage == "Preflop",
      canFold = True; canCheck = True; canBet = True;];
     );
   ),
 SynchronousUpdating -> True
 ]

Manipulate[Overlay[{If[inGame == True, Which[bigBlindMove == "Computer", 
      drawBoard[userHand, computerHand, userbesthand, computerbesthand, 
       stage, whoseMove, userBet, computerBet, uTotalBet, cTotalBet, pot, 
       userStack, computerStack, winner, userCondition, cpuCondition], 
      bigBlindMove == "player1", drawBoard2[userHand, computerHand, 
       userbesthand, computerbesthand, stage, whoseMove, userBet, 
       computerBet, uTotalBet, cTotalBet, pot, userStack, computerStack, 
       winner, userCondition, cpuCondition]], 
     Graphics[{Text[Style["Welcome to Pot-Limit Omaha!", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, 2}], 
       Text[Style["Start by setting the Small Blind and the", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, 1.5}], 
       Text[Style["stack sizes using the sliders above.", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, 1.25}], 
       Text[Style["You can click on the gray '+' to set specific amounts.", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, 0.75}], 
       Text[Style["You will be playing a computer that strategizes", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, 0.25}], 
       Text[Style["its decisions based on the equity by the river.", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, 0}], 
       Text[Style["Good luck, and click 'New Game' to begin playing!", 
         FontSize -> Scaled[0.1], FontFamily -> "Arial", Black], {0, -0.5}]}, \

      ImageSize -> {1000, 500}]]}, Background -> Darker[Green]], 
  {{shuffledDeck, {{10, 2}, {9, 1}, {13, 2}, {2, 4}, {11, 2}, {2, 1}, {9, 4}, \

     {6, 3}, {2, 2}, {8, 4}, {6, 1}, {10, 3}, {6, 2}, {7, 3}, {12, 2}, 
     {6, 4}, {3, 4}, {12, 4}, {5, 1}, {4, 4}, {14, 4}, {7, 1}, {14, 3}, 
     {13, 3}, {10, 1}, {4, 1}, {12, 1}, {8, 1}, {5, 4}, {13, 4}, {14, 1}, 
     {9, 3}, {11, 3}, {5, 2}, {3, 1}, {3, 2}, {7, 4}, {14, 2}, {8, 3}, 
     {8, 2}, {4, 2}, {2, 3}, {13, 1}, {12, 3}, {11, 4}, {3, 3}, {9, 2}, 
     {5, 3}, {4, 3}, {7, 2}, {10, 4}, {11, 1}}}, {}, ControlType -> None}, 
  {{SmallBlind, 5}, 1, 6, 1}, {{pot, 20}, ControlType -> None}, 
  {{StackSize, 1000}, 500, 1000, 1}, {{minRaise, 0}, ControlType -> None}, 
  {{maxRaise, 20}, ControlType -> None}, {{minBet, 2*SmallBlind}, 
   ControlType -> None}, {{maxBet, 20}, ControlType -> None}, 
  {{userBet, 0}, ControlType -> None}, {{uTotalBet, 10}, 
   ControlType -> None}, {{computerBet, 0}, ControlType -> None}, 
  {{cTotalBet, 2*SmallBlind}, ControlType -> None}, 
  {{stage, "Showdown"}, "Preflop", ControlType -> None}, 
  {whoseMove, "player1", ControlType -> None}, 
  {{inGame, True}, False, ControlType -> None}, 
  {bigBlindMove, "Computer", ControlType -> None}, 
  {{winner, "CPU"}, "", ControlType -> None}, 
  {userCondition, "", ControlType -> None}, {cpuCondition, "", 
   ControlType -> None}, {{canNextRound, True}, False, ControlType -> None}, 
  {canFold, False, ControlType -> None}, {canBet, False, 
   ControlType -> None}, {canCheck, False, ControlType -> None}, 
  {canCall, False, ControlType -> None}, {canRaise, False, 
   ControlType -> None}, Row[{Button["New game", newGameAction, 
     Method -> "Queued"]}], 
  Row[{Button["Next round", nextRoundAction, Enabled -> canNextRound, 
     Method -> "Queued"]}], 
  Row[{Button["Fold", foldAction, Enabled -> canFold, Method -> "Queued"], 
    Button["Check", checkAction, Enabled -> canCheck, Method -> "Queued"], 
    Button["Call", callAction, Enabled -> canCall, Method -> "Queued"], 
    Button["Bet", betAction, Enabled -> canBet, Method -> "Queued"], 
    Button["Raise", raiseAction, Enabled -> canRaise, Method -> "Queued"]}], 
  {{BetRange, 20}, Dynamic[minBet], Dynamic[maxBet], 1, 
   Enabled -> Dynamic[canBet]}, {{RaiseRange, maxRaise}, Dynamic[minRaise], 
   Dynamic[maxRaise], 1, Enabled -> Dynamic[canRaise]}, 
  SynchronousUpdating -> True, Initialization :> 
   (newGameAction := (Clear[userbesthand, computerbesthand, userEquity, 
       computerEquity, tieEquity, new]; shuffledDeck = 
       RandomSample[Flatten[Table[{rank, suit}, {rank, 2, 14}, {suit, 1, 4}], \

         1]]; inGame = True; stage = "Preflop"; whoseMove = "player1"; 
      userHand = shuffledDeck[[1 ;; 4]]; computerHand = 
       shuffledDeck[[5 ;; 8]]; restOfDeck1 = shuffledDeck[[9 ;; All]]; 
      restOfDeck2 = Nest[Rest, restOfDeck1, 3]; restOfDeck3 = 
       Rest[restOfDeck2]; board = restOfDeck1[[1 ;; 5]]; 
      flop = board[[1 ;; 3]]; turn1 = board[[2 ;; 4]]; 
      turn2 = Table[board[[i]], {i, {1, 2, 4}}]; 
      turn3 = Table[board[[i]], {i, {1, 3, 4}}]; river1 = board[[3 ;; All]]; 
      river2 = Table[board[[i]], {i, {1, 2, 5}}]; 
      river3 = Table[board[[i]], {i, {1, 3, 5}}]; 
      river4 = Table[board[[i]], {i, {1, 4, 5}}]; 
      river5 = Table[board[[i]], {i, {2, 3, 5}}]; 
      river6 = Table[board[[i]], {i, {2, 4, 5}}]; 
      uHand1 = userHand[[1 ;; 2]]; uHand2 = userHand[[2 ;; 3]]; 
      uHand3 = userHand[[3 ;; 4]]; uHand4 = Table[userHand[[i]], 
        {i, {1, 3}}]; uHand5 = Table[userHand[[i]], {i, {2, 4}}]; 
      uHand6 = Table[userHand[[i]], {i, {1, 4}}]; 
      cHand1 = computerHand[[1 ;; 2]]; cHand2 = computerHand[[2 ;; 3]]; 
      cHand3 = computerHand[[3 ;; 4]]; cHand4 = Table[computerHand[[i]], 
        {i, {1, 3}}]; cHand5 = Table[computerHand[[i]], {i, {2, 4}}]; 
      cHand6 = Table[computerHand[[i]], {i, {1, 4}}]; userBet = SmallBlind; 
      computerBet = 2*SmallBlind; pot = 3*SmallBlind; uTotalBet = SmallBlind; \

      cTotalBet = 2*SmallBlind; winner = ""; userCondition = ""; 
      cpuCondition = ""; userStack = StackSize - userBet; 
      computerStack = StackSize - computerBet; canFold = True; 
      canCheck = False; canBet = False; canCall = True; canRaise = True; 
      canNextRound = False; ); nextRoundAction := 
     (Clear[userbesthand, computerbesthand, userEquity, computerEquity, 
       tieEquity, new]; inGame = True; stage = "Preflop"; 
      whoseMove = "player1"; canNextRound = False; 
      shuffledDeck = RandomSample[Flatten[Table[{rank, suit}, {rank, 2, 14}, 
          {suit, 1, 4}], 1]]; userHand = shuffledDeck[[1 ;; 4]]; 
      computerHand = shuffledDeck[[5 ;; 8]]; restOfDeck1 = 
       shuffledDeck[[9 ;; All]]; restOfDeck2 = Nest[Rest, restOfDeck1, 3]; 
      restOfDeck3 = Rest[restOfDeck2]; board = restOfDeck1[[1 ;; 5]]; 
      flop = board[[1 ;; 3]]; turn1 = board[[2 ;; 4]]; 
      turn2 = Table[board[[i]], {i, {1, 2, 4}}]; 
      turn3 = Table[board[[i]], {i, {1, 3, 4}}]; river1 = board[[3 ;; All]]; 
      river2 = Table[board[[i]], {i, {1, 2, 5}}]; 
      river3 = Table[board[[i]], {i, {1, 3, 5}}]; 
      river4 = Table[board[[i]], {i, {1, 4, 5}}]; 
      river5 = Table[board[[i]], {i, {2, 3, 5}}]; 
      river6 = Table[board[[i]], {i, {2, 4, 5}}]; 
      uHand1 = userHand[[1 ;; 2]]; uHand2 = userHand[[2 ;; 3]]; 
      uHand3 = userHand[[3 ;; 4]]; uHand4 = Table[userHand[[i]], 
        {i, {1, 3}}]; uHand5 = Table[userHand[[i]], {i, {2, 4}}]; 
      uHand6 = Table[userHand[[i]], {i, {1, 4}}]; 
      cHand1 = computerHand[[1 ;; 2]]; cHand2 = computerHand[[2 ;; 3]]; 
      cHand3 = computerHand[[3 ;; 4]]; cHand4 = Table[computerHand[[i]], 
        {i, {1, 3}}]; cHand5 = Table[computerHand[[i]], {i, {2, 4}}]; 
      cHand6 = Table[computerHand[[i]], {i, {1, 4}}]; 
      If[userBet == SmallBlind, computerBet = SmallBlind; 
        userBet = 2*SmallBlind; , userBet = SmallBlind; 
        computerBet = 2*SmallBlind; ]; pot = 3*SmallBlind; 
      minBet = SmallBlind; maxBet = pot; minRaise = 2*SmallBlind; 
      maxRaise = 5*SmallBlind; uTotalBet = userBet; cTotalBet = computerBet; 
      winner = ""; userCondition = ""; cpuCondition = ""; 
      whoseMove = bigBlindMove; If[bigBlindMove == "Computer", 
       bigBlindMove = "player1"; , bigBlindMove = "Computer"; ]; 
      userStack = userStack - userBet; computerStack = 
       computerStack - computerBet; If[whoseMove == "player1", 
       canFold = True; canCheck = False; canBet = False; canCall = True; 
        canRaise = True; canNextRound = False; , canFold = False; 
        canCheck = False; canBet = False; canCall = False; canRaise = False; 
        canNextRound = False; computerTurn; ]); 
    updateBets[betValue$_Integer] := (If[whoseMove == "player1", 
       whoseMove = "Computer"; userBet += betValue$; uTotalBet += betValue$; 
        userStack = userStack - betValue$; , whoseMove = "player1"; 
        computerBet += betValue$; cTotalBet += betValue$; 
        computerStack = computerStack - betValue$; ]; 
      minRaise = 2*Abs[userBet - computerBet]; pot += betValue$; 
      maxRaise = minRaise + pot; maxBet = pot; If[whoseMove == "player1", 
       If[maxRaise > userStack, maxRaise = userStack; 
          If[minRaise > userStack, minRaise = userStack; ]]; , 
       If[maxRaise > computerStack, maxRaise = computerStack; 
          If[minRaise > computerStack, minRaise = computerStack; ]]; ]; 
      If[whoseMove == "player1", If[maxBet > userStack, maxBet = userStack; 
          If[minBet > userStack, minBet = userStack; ]]; , 
       If[maxBet > computerStack, maxBet = computerStack; 
          If[minBet > computerStack, minBet = computerStack; ]]; ]; ); 
    flopChange := (bestFlop[userbesthand, uHand1, uHand2, uHand3, uHand4, 
       uHand5, uHand6]; bestFlop[computerbesthand, cHand1, cHand2, cHand3, 
       cHand4, cHand5, cHand6]; equityRow = flopEquity[userbesthand, 
        computerbesthand]; userEquity = equityRow[[1]]; 
      computerEquity = equityRow[[2]]; tieEquity = equityRow[[3]]; ); 
    turnChange := (userbesthand = bestTurn[userbesthand, uHand1, uHand2, 
        uHand3, uHand4, uHand5, uHand6]; computerbesthand = 
       bestTurn[computerbesthand, cHand1, cHand2, cHand3, cHand4, cHand5, 
        cHand6]; equityRow = turnEquity[userbesthand, computerbesthand]; 
      userEquity = equityRow[[1]]; computerEquity = equityRow[[2]]; 
      tieEquity = equityRow[[3]]; ); riverChange := 
     (userbesthand = bestRiver[userbesthand, uHand1, uHand2, uHand3, uHand4, 
        uHand5, uHand6]; computerbesthand = bestRiver[computerbesthand, 
        cHand1, cHand2, cHand3, cHand4, cHand5, cHand6]; 
      equityRow = riverEquity[userbesthand, computerbesthand]; 
      userEquity = equityRow[[1]]; computerEquity = equityRow[[2]]; 
      tieEquity = equityRow[[3]]; ); stageChange := 
     (userBet = 0; computerBet = 0; Which[stage == "Preflop", 
       flopChange; userCondition = ""; cpuCondition = ""; stage = "Flop"; 
        If[bigBlindMove == "Computer", computerTurn; ]; canFold = True; 
        canCheck = True; canBet = True; canCall = False; canRaise = False; 
        canNextRound = False; , stage == "Flop", 
       turnChange; userCondition = ""; cpuCondition = ""; stage = "Turn"; 
        If[bigBlindMove == "Computer", computerTurn; ]; canFold = True; 
        canCheck = True; canBet = True; canCall = False; canRaise = False; 
        canNextRound = False; , stage == "Turn", riverChange; 
        userCondition = ""; cpuCondition = ""; stage = "River"; 
        If[bigBlindMove == "Computer", computerTurn; ]; canFold = True; 
        canCheck = True; canBet = True; canCall = False; canRaise = False; 
        canNextRound = False; , stage == "River", stage = "Showdown"; 
        If[userEquity == 100, winner = "player1"; userStack += pot; , 
         If[computerEquity == 100, winner = "CPU"; computerStack += pot, 
          winner = "both"; userStack += pot/2; computerStack += pot/2; ]]; 
        userCondition = ""; cpuCondition = ""; canFold = False; 
        canBet = False; canCheck = False; canCall = False; canRaise = False; 
        canNextRound = True; ]; ); callAction := (userCondition = "call"; 
      canFold = False; canBet = False; canCheck = False; canCall = False; 
      canRaise = False; updateBets[Abs[userBet - computerBet]]; 
      stageChange; ); foldAction := (userCondition = "fold"; canFold = False; \

      canBet = False; canCheck = False; canCall = False; canRaise = False; 
      userBet = 0; computerBet = 0; uTotalBet = 0; cTotalBet = 0; 
      canNextRound = True; computerStack += pot; winner = "Computer"; 
      pot = 0; ); betAction := (userCondition = "bet"; canBet = False; 
      canCheck = False; canRaise = True; canCall = True; 
      updateBets[BetRange]; computerTurn; ); raiseAction := 
     (userCondition = "raise"; updateBets[RaiseRange]; computerTurn; ); 
    checkAction := (If[stage != "Preflop", userCondition = "check"; 
        canBet = False; canCheck = False; canRaise = True; canCall = True; 
        computerTurn; , stageChange; ]; ); computerNewEquity := 
     4*((computerEquity + tieEquity/2)/100 - 0.5)^2; 
    computerFoldAction := (canFold = False; canBet = False; canCheck = False; \

      canCall = False; canRaise = False; userBet = 0; computerBet = 0; 
      uTotalBet = 0; cTotalBet = 0; canNextRound = True; userStack += pot; 
      winner = "player1"; cpuCondition = "fold"; pot = 0; ); 
    computerCheckAction := (If[userBet != computerBet, computerCallAction; , 
       If[userCondition == "check" || userCondition == "", 
         cpuCondition = "check"; ]; ]; ); computerCallAction := 
     (cpuCondition = "call"; canFold = False; canBet = False; 
      canCheck = False; canCall = False; canRaise = False; 
      updateBets[Abs[userBet - computerBet]]; ); computerBetAction := 
     (If[userCondition == "check"; , 
       updateBets[RandomInteger[{minBet, maxBet}]]; cpuCondition = "bet"; 
        canBet = False; canCheck = False; canRaise = True; canCall = True; , 
       If[userCondition == "bet", computerRaiseAction; ]; ]; ); 
    computerRaiseAction := (updateBets[RandomInteger[{minRaise, maxRaise}]]; 
      cpuCondition = "raise"; ); computerTurn := (whoseMove = "Computer"; 
      new = computerNewEquity; If[stage != "Preflop", 
       If[bigBlindMove == "Computer" && cpuCondition == "", 
        computerCheckAction; , If[userCondition == "check", 
         RandomChoice[{new, 1 - new} -> {computerCheckAction; , 
             computerBetAction; }]; , If[computerEquity + tieEquity/2 < 
           100/3, RandomChoice[{new, (1 - new)/2, (1 - new)/2} -> 
             {computerFoldAction; , computerCheckAction; , 
              computerBetAction; }]; , If[computerEquity + tieEquity/2 >= 
            200/3, RandomChoice[{(1 - new)/2, (1 - new)/2, new} -> 
              {computerFoldAction; , computerCheckAction; , 
               computerBetAction; }]; , RandomChoice[{new, 1 - new} -> 
              {computerCheckAction; , computerBetAction; }]; ]]]], 
       computerCallAction; ]; whoseMove = "player1"; 
      If[bigBlindMove == "Computer" && (cpuCondition == "call" || 
         (cpuCondition == "check" && userCondition == "check")), 
       stageChange; ]; If[bigBlindMove == "player1" && 
        cpuCondition == "call" && userCondition == "" && 
        computerBet == 2*SmallBlind && stage == "Preflop", 
       canFold = True; canCheck = True; canBet = True; ]; ); )]
